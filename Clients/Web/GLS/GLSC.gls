include : Language

file start : GLS
    class start : GLSC
        class member variable declare : Languages private { dictionary type : string Language }
        class member variable declare : SearchEnds private { dictionary type : string Language }

        class constructor start : GLSC
            class member variable set : { this } Languages { dictionary initialize : string string }
            class member variable set incomplete : { this } SearchEnds { dictionary initialize start : string string }
                dictionary initialize key : (" ") (" ") ,
                dictionary initialize key : "{" "}" ,
                dictionary initialize key : "(" ")" 
            dictionary initialize end
        class constructor end


        comment block : (Core parsing)

        class member function start : GLSC public parseCommands string language Language commandsRaw string[]
            if start : { operation : { native call : array length commandsRaw } equalto 0 or { parenthesis : { operation : { native call : array length commandsRaw } equalto 1 and { native call : string length { array get item : commandsRaw 0 } } equalto 0 }
                return : ""
            if end

            variable declare : output string ""
            variable declare : numTabs number 0
            variable declare : lastTabRequest number 0
            variable declare : lastLineSkipped boolean false
            variable declare : command mixed[]
            variable declare : i number
            variable declare : j number

            for numbers start : i 0 lessthan { native call : array length commandsRaw }
                operation : command equals { class member function call : { this } parseCommand language { array get item : commandsRaw i } false }

                comment line : Each command is an even-length [string, int, ...]
                for numbers start : j 0 lessthan { native call : string length command } 2
                    comment line : Special case: a blank line after an inline command is ignored
                    comment line : This is useful for things like lambda types that aren't in every language
                    if start : { operation : lastTabRequest equalto { class static variable get : Language INT_MIN } and { native call : string length command } equalto 2 and { array get item : command 0 } equalto "" }
                        operation : lastLineSkipped equals true
                        loop continue
                    if end

                    if start : { operation : { array get item : command 1 } equalto { class static variable get : Language INT_MIN } }
                        if start : { operation : { array get item : command 0 } notequalto "" }
                            operation : output increaseby (" ") plus { array get item : command 0 }
                        if end
                    else start
                        comment line : Just "\0" changes numTabs without adding a line
                        if start : { operation : { array get item : command j } notequalto "\0" and { not : lastLineSkipped } }
                            operation : output increaseby "\n"
                        if end

                        if start : { operation : { array get item : command { operation : j plus 1 } } lessthan 0 }
                            operation : numTabs increaseby { array get item : command { operation : j plus 1 } }
                            operation : output increaseby { class member function call : { this } generateTabs numTabs }
                            if start : { operation : { array get item : command j } notequalto "\0" }
                                operation : output increaseby { array get item : command j }
                            if end
                        else start
                            operation : output increaseby { class member function call : { this } generateTabs numTabs }
                            if start : { operation : { array get item : command j } notequalto "\0" }
                                operation : output increaseby { array get item : command j }
                            if end
                            operation : numTabs increaseby { array get item : command { operation : j plus 1 } }
                        if end
                    if end

                    operation : lastTabRequest equals { array get item : command { operation : { native call : array length command } minus 1 } }
                    operation : lastLineSkipped equals false
                for end
            for end

            return : output
        class member function end

        class member function start : GLSC public parseCommand mixed[] language Language commandRaw string isInline boolean
            if start : { class member function call : { this } isStringSpace commandRaw }
                return : { array initialize : mixed "" 0 }
            if end

            variable declare : colonIndex number { native call : string find commandRaw ":" }
            variable declare : result mixed[]
            variable declare : functionArgs string[]
            variable declare : functionName string
            variable declare : argumentsRaw string

            comment line : Arguments only exist if there is a colon separating them from the command
            if start : { operation : colonIndex equalto -1 }
                operation : functionName equals { class member function call : { this } trimString commandRaw }
                operation : functionArgs equals { array initialize : string }
            else start
                operation : functionName equals { class member function call : { this } trimString { native call : string substring commandRaw 0 colonIndex } }
                operation : argumentsRaw equals { class member function call : { this } trimString { native call : string substring commandRaw { operation : colonIndex plus 1 } } }
                operation : functionArgs equals { class member function call : { this } parseArguments language argumentsRaw isInline }
            if end

            return : { class member function call : language print functionName functionArgs isInline }
        class member function end

        class member function start : GLSC public parseArguments string[] language Language argumentsRaw string isInline boolean
            comment line : Directly putting '{' in GLSC code is tough (see #79)
            variable declare : commandStarter character '{'
            variable declare : numArgs number 0
            variable declare : argumentsConverted string[]
            variable declare : argument string
            variable declare : starter string
            variable declare : end number
            variable declare : i number

            comment line : Until native array pushing is supported, this is required...
            for numbers start : i 0 lessthan { native call : string length argumentsRaw }
                operation : starter equals { array get item : argumentsRaw i }

                if start : { class member function call : { this } isCharacterSpace starter }
                    loop continue
                if end

                if start : { dictionary key check : { class member variable get : { this } SearchEnds } starter }
                    operation : end equals { class member function call : { this } findSearchEnd argumentsRaw starter i }
                    operation : i increaseby 1
                else start
                    operation : end equals { class member function call : { this } findNextSpace argumentsRaw i }
                if end
                
                if start : { operation : end equalto -1 }
                    operation : end equals { native call : string length argumentsRaw }
                if end

                operation : i equals end
                operation : numArgs increaseby 1
            for end

            operation : argumentsConverted equals { array initialize sized : string numArgs }
            operation : numArgs equals 0

            for numbers start : i 0 lessthan { native call : string length argumentsRaw }
                operation : starter equals { array get item : argumentsRaw i }
                
                if start : { class member function call : { this } isCharacterSpace starter }
                    loop continue
                if end

                if start : { dictionary key check : { class member variable get : { this } SearchEnds } starter }
                    operation : end equals { class member function call : { this } findSearchEnd argumentsRaw starter i }
                    operation : i increaseby 1
                else start
                    operation : end equals { class member function call : { this } findNextSpace argumentsRaw i }
                if end

                if start : { operation : end equalto -1 }
                    operation : end equals { native call : string length argumentsRaw }
                if end
                
                operation : argument equals { native call : string substring argumentsRaw i { operation : end minus i } }
                operation : i equals end

                if start : { operation : starter equalto commandStarter }
                    operation : argument equals { array get item : { class member function call : { this } parseCommand language argument true } 0 }
                if end

                operation : { array get item : argumentsConverted numArgs } equals argument
                operation : numArgs increaseby 1
            for end

            return : argumentsConverted
        class member function end


        comment block : (Private utilities)

        class member function start : GLSC private generateTabs string numTabs number
            variable declare : numTabsActual number { operation : numTabs times 4 }
            variable declare : output string ""
            variable declare : i number

            for numbers start : i 0 lessthan numTabsActual
                operation : output increaseby (" ")
            for end

            return : output
        class member function end

        class member function start : GLSC private isStringSpace boolean text string
            variable declare : i number
            for numbers start : i 0 lessthan { native call : string length text }
                if start : { not : { class member function call : { this } isCharacterSpace { array get item : text i } } }
                    return : false
                if end
            for end

            return : true
        class member function end

        class member function start : GLSC private isCharacterSpace boolean character string
            return : { operation : character equalto (' ') or character equalto '\r' or character equalto '\n' }
        class member function end

        class member function start : GLSC private findNextSpace number haystack string start number
            variable declare : i number

            for numbers start : i { operation : start plus 1 } lessthan { native call : string length haystack }
                if start : { class member function call : { this } isCharacterSpace { array get item : haystack i } }
                    return : i
                if end
            for end

            return : { native call : string length haystack }
        class member function end

        class member function start : GLSC private findSearchEnd number haystack string starter string start number
            variable declare : ender string { dictionary key get : { class member variable get : { this } SearchEnds } starter }
            variable declare : numStarts number 1
            variable declare : current string
            variable declare : i number

            for numbers start : i { operation : start plus 1 } lessthan { native call : string length haystack }
                operation : current equals { array get item : haystack i }

                if start : { operation : current equalto starter }
                    operation : numStarts increaseby 1
                elif start : { operation : current equalto ender }
                    operation : numStarts decreaseby 1
                    if start : { operation : numStarts lessthan 1 }
                        return : i
                    if end
                if end
            for end

            return : -1
        class member function end

        class member function start : GLSC private trimString string text string
            return : { class member function call : { this } trimStringLeft { class member function call : { this } trimStringRight text } }
        class member function end

        class member function start : GLSC private trimStringLeft string text string
            variable declare : i number
            for numbers start : i 0 lessthan { native call : string length text }
                if start : { not : { class member function call : { this } isCharacterSpace { array get item : text i } } }
                    return : { native call : string substring text i }
                if end
            for end

            return : ""
        class member function end

        class member function start : GLSC private trimStringRight string text string
            variable declare : i number
            for numbers start : i { operation : { native call : string length text } minus 1 } greaterthan 0 -1 
                if start : { not : { class member function call : { this } isCharacterSpace { array get item : text i } } }
                    return : { native call : string substring text 0 { operation : i plus 1 } }
                if end
            for end

            return : ""
        class member function end
    class end
file end