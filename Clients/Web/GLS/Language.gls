include dictionary

file start : GLS
    lambda type declare : Printer mixed[] functionArgs string[] isInline boolean
    
    class start : Language
        class member variable declare : Printers private { dictionary type : string Printer }
        class member variable declare : OperationAliases private { dictionary type : string string }
        class member variable declare : TypeAliases private { dictionary type : string string }
        class member variable declare : ValueAliases private { dictionary type : string string }
        class member variable declare : NativeFunctionAliases private { dictionary type : string string string }

        comment line : General information
        class member variable declare : Name private string
        class member variable declare : Extension private string
        class member variable declare : PrintFunction private string
        class member variable declare : SemiColon private string

        comment line : Comments
        class member variable declare : CommentorBlockStart private string
        class member variable declare : CommentorBlockEnd private string
        class member variable declare : CommentorInline private string

        comment line : Conditionals
        class member variable declare : ConditionStartLeft private string
        class member variable declare : ConditionStartRight private string
        class member variable declare : ConditionContinueLeft private string
        class member variable declare : ConditionContinueRight private string
        class member variable declare : ConditionEnd private string
        class member variable declare : Elif private string
        class member variable declare : Else private string
        class member variable declare : If private string

        comment line : Operators
        class member variable declare : And private string
        class member variable declare : GreaterThan private string
        class member variable declare : GreaterThanOrEqual private string
        class member variable declare : LessThan private string
        class member variable declare : LessThanOrEqual private string
        class member variable declare : Or private string

        comment line : Variables
        class member variable declare : Undefined private string
        class member variable declare : VariableTypesExplicit private boolean
        class member variable declare : VariableTypesAfterName private boolean
        class member variable declare : VariableTypeMarker private string
        class member variable declare : VariableDeclareStart private string

        comment line : Booleans

        class member variable declare : BooleanClass private string
        class member variable declare : True private string
        class member variable declare : False private string

        comment line : Numbers
        class member variable declare : NumberClass private string

        comment line : Strings
        class member variable declare : StringClass private string
        class member variable declare : StringLength private string
        class member variable declare : ToString private string
        class member variable declare : ToStringAsFunction private boolean

        comment line : Loops
        class member variable declare : Break private string
        class member variable declare : Continue private string
        class member variable declare : ForEachAsMethod private boolean
        class member variable declare : ForEachInner private string
        class member variable declare : ForEachKeysAsStatic private boolean
        class member variable declare : ForEachKeysGet private string
        class member variable declare : ForEachPairsGet private string
        class member variable declare : ForEachPairsPairClass private string
        class member variable declare : ForEachPairsAsPair private boolean
        class member variable declare : ForEachPairsRetrieveKey private string
        class member variable declare : ForEachPairsRetrieveValue private string
        class member variable declare : ForEachStarter private string
        class member variable declare : RangedForLoops private boolean
        class member variable declare : RangedForLoopsStart private string
        class member variable declare : RangedForLoopsMiddle private string
        class member variable declare : RangedForLoopsEnd private string

        comment line : Arrays
        class member variable declare : ArrayClass private string
        class member variable declare : ArrayInitializationAsNew private boolean
        class member variable declare : ArrayInitializationAsNewMultiplied private boolean
        class member variable declare : ArrayInitializationAsNewStatic private boolean
        class member variable declare : ArrayInitializationAsNewTyped private boolean
        class member variable declare : ArrayLength private string
        class member variable declare : ArrayLengthAsFunction private boolean
        class member variable declare : ArrayNegativeIndices private boolean

        comment line : Dictionaries
        class member variable declare : DictionaryClass private string
        class member variable declare : DictionaryInitializationAsNew private boolean
        class member variable declare : DictionaryInitializeEnder private string
        class member variable declare : DictionaryInitializeKeyComma private string
        class member variable declare : DictionaryInitializeKeyWithSemicolon private boolean
        class member variable declare : DictionaryInitializeStarter private string
        class member variable declare : DictionaryKeyCheckAsFunction private boolean
        class member variable declare : DictionaryKeyChecker private string
        class member variable declare : DictionaryKeyLeft private string
        class member variable declare : DictionaryKeyMiddle private string
        class member variable declare : DictionaryKeyRight private string

        comment line : Exceptions
        class member variable declare : ExceptionCatch private string
        class member variable declare : ExceptionClass private string
        class member variable declare : ExceptionErrorPrefix private string
        class member variable declare : ExceptionFinally private string
        class member variable declare : ExceptionThrow private string
        class member variable declare : ExceptionTry private string

        comment line : Functions
        class member variable declare : FunctionDefine private string
        class member variable declare : FunctionDefineRight private string
        class member variable declare : FunctionDefineEnd private string
        class member variable declare : FunctionReturnsExplicit private boolean
        class member variable declare : FunctionTypeAfterName private boolean
        class member variable declare : FunctionTypeMarker private string

        comment line : Lambdas
        class member variable declare : LambdaDeclareEnder private string
        class member variable declare : LambdaDeclareMiddle private string
        class member variable declare : LambdaDeclareStarter private string
        class member variable declare : LambdaTypeDeclarationAsInterface private boolean
        class member variable declare : LambdaTypeDeclarationRequired private boolean
        class member variable declare : LambdaTypeDeclarationEnd private string[]
        class member variable declare : LambdaTypeDeclarationMiddle private string[]
        class member variable declare : LambdaTypeDeclarationStart private string[]

        comment line : Classes
        class member variable declare : ClassConstructorAsStatic private boolean
        class member variable declare : ClassConstructorInheritedShorthand private boolean
        class member variable declare : ClassConstructorName private string
        class member variable declare : ClassConstructorLoose private boolean
        class member variable declare : ClassEnder private string
        class member variable declare : ClassExtends private string
        class member variable declare : ClassExtendsAsFunction private boolean
        class member variable declare : ClassFunctionsStart private string
        class member variable declare : ClassFunctionsThis private string
        class member variable declare : ClassMemberFunctionGetEnd private string
        class member variable declare : ClassMemberFunctionGetStart private string
        class member variable declare : ClassMemberFunctionGetBind private boolean
        class member variable declare : ClassFunctionsTakeThis private boolean
        class member variable declare : ClassMemberVariableDefault private string
        class member variable declare : ClassMemberVariablePrivacy private boolean
        class member variable declare : ClassMemberVariableStarter private string
        class member variable declare : ClassNewer private string
        class member variable declare : ClassParentName private string
        class member variable declare : ClassPrivacy private boolean
        class member variable declare : ClassPublicAlias private string
        class member variable declare : ClassStaticLabel private string
        class member variable declare : ClassStaticFunctionDecorator private string
        class member variable declare : ClassStaticFunctionRequiresDecorator private boolean
        class member variable declare : ClassStartLeft private string
        class member variable declare : ClassStartRight private string
        class member variable declare : ClassTemplates private boolean
        class member variable declare : ClassTemplatesBetween private string
        class member variable declare : ClassThis private string
        class member variable declare : ClassThisAccess private string

        comment line : File
        class member variable declare : FileEndLine private string
        class member variable declare : FileStartLeft private string
        class member variable declare : FileStartRight private string
        class member variable declare : IncludeDictionaryType private string
        class member variable declare : IncludeEnder private string
        class member variable declare : IncludeFileExtension private boolean
        class member variable declare : IncludeStarter private string

        comment line : Main
        class member variable declare : MainEndLine private string
        class member variable declare : MainStartLine private string

        comment line : Extra
        class static variable declare : INT_MIN public int 9001

        class constructor start : Language
            class member variable set incomplete : { this } Printers { dictionary initialize start : string Printer }
                dictionary initialize key : ("array initialize") { class member function get : { this } ArrayInitialize } ,
                dictionary initialize key : ("array initialize sized") { class member function get : { this } ArrayInitializeSized } ,
                dictionary initialize key : ("array get item") { class member function get : { this } ArrayGetItem } ,
                dictionary initialize key : ("catch") { class member function get : { this } Catch } ,
                dictionary initialize key : ("class constructor end") { class member function get : { this } ClassConstructorEnd } ,
                dictionary initialize key : ("class constructor inherited call") { class member function get : { this } ClassConstructorInheritedCall } ,
                dictionary initialize key : ("class constructor inherited start") { class member function get : { this } ClassConstructorInheritedStart } ,
                dictionary initialize key : ("class constructor start") { class member function get : { this } ClassConstructorStart } ,
                dictionary initialize key : ("class end") { class member function get : { this } ClassEnd } ,
                dictionary initialize key : ("class member function call") { class member function get : { this } ClassMemberFunctionCall } ,
                dictionary initialize key : ("class member function end") { class member function get : { this } ClassMemberFunctionEnd } ,
                dictionary initialize key : ("class member function get") { class member function get : { this } ClassMemberFunctionGet } ,
                dictionary initialize key : ("class member function start") { class member function get : { this } ClassMemberFunctionStart } ,
                dictionary initialize key : ("class member variable declare") { class member function get : { this } ClassMemberVariableDeclare } ,
                dictionary initialize key : ("class member variable get") { class member function get : { this } ClassMemberVariableGet } ,
                dictionary initialize key : ("class member variable set") { class member function get : { this } ClassMemberVariableSet } ,
                dictionary initialize key : ("class member variable set incomplete") { class member function get : { this } ClassMemberVariableSetIncomplete } ,
                dictionary initialize key : ("class static function call") { class member function get : { this } ClassStaticFunctionCall } ,
                dictionary initialize key : ("class static function end") { class member function get : { this } ClassStaticFunctionEnd } ,
                dictionary initialize key : ("class static function get") { class member function get : { this } ClassStaticFunctionGet } ,
                dictionary initialize key : ("class static function start") { class member function get : { this } ClassStaticFunctionStart } ,
                dictionary initialize key : ("class static variable declare") { class member function get : { this } ClassStaticVariableDeclare } ,
                dictionary initialize key : ("class static variable get") { class member function get : { this } ClassStaticVariableGet } ,
                dictionary initialize key : ("class static variable set") { class member function get : { this } ClassStaticVariableSet } ,
                dictionary initialize key : ("class new") { class member function get : { this } ClassNew } ,
                dictionary initialize key : ("class start") { class member function get : { this } ClassStart } ,
                dictionary initialize key : ("comment block") { class member function get : { this } CommentBlock } ,
                dictionary initialize key : ("comment line") { class member function get : { this } CommentLine } ,
                dictionary initialize key : ("comment inline") { class member function get : { this } CommentInline } ,
                dictionary initialize key : ("comparison") { class member function get : { this } Comparison } ,
                dictionary initialize key : ("concatenate") { class member function get : { this } Concatenate } ,
                dictionary initialize key : ("dictionary key check") { class member function get : { this } DictionaryKeyCheck } ,
                dictionary initialize key : ("dictionary key get") { class member function get : { this } DictionaryKeyGet } ,
                dictionary initialize key : ("dictionary key set") { class member function get : { this } DictionaryKeySet } ,
                dictionary initialize key : ("dictionary initialize") { class member function get : { this } DictionaryInitialize } ,
                dictionary initialize key : ("dictionary initialize end") { class member function get : { this } DictionaryInitializeEnd } ,
                dictionary initialize key : ("dictionary initialize key") { class member function get : { this } DictionaryInitializeKey } ,
                dictionary initialize key : ("dictionary initialize start") { class member function get : { this } DictionaryInitializeStart } ,
                dictionary initialize key : ("dictionary type") { class member function get : { this } DictionaryType } ,
                dictionary initialize key : ("elif start") { class member function get : { this } ElifStart } ,
                dictionary initialize key : ("else start") { class member function get : { this } ElseStart } ,
                dictionary initialize key : ("file end") { class member function get : { this } FileEnd } ,
                dictionary initialize key : ("file start") { class member function get : { this } FileStart } ,
                dictionary initialize key : ("finally") { class member function get : { this } Finally } ,
                dictionary initialize key : ("for each keys start") { class member function get : { this } ForEachKeysStart } ,
                dictionary initialize key : ("for each pairs start") { class member function get : { this } ForEachPairsStart } ,
                dictionary initialize key : ("for end") { class member function get : { this } ForEnd } ,
                dictionary initialize key : ("for numbers start") { class member function get : { this } ForNumbersStart } ,
                dictionary initialize key : ("function call") { class member function get : { this } FunctionCall } ,
                dictionary initialize key : ("function call partial end") { class member function get : { this } FunctionCallPartialEnd } ,
                dictionary initialize key : ("function call partial start") { class member function get : { this } FunctionCallPartialStart } ,
                dictionary initialize key : ("function end") { class member function get : { this } FunctionEnd } ,
                dictionary initialize key : ("function start") { class member function get : { this } FunctionStart } ,
                dictionary initialize key : ("if end") { class member function get : { this } IfEnd } ,
                dictionary initialize key : ("if start") { class member function get : { this } IfStart } ,
                dictionary initialize key : ("include") { class member function get : { this } Include } ,
                dictionary initialize key : ("include dictionary") { class member function get : { this } IncludeDictionary } ,
                dictionary initialize key : ("lambda declare inline") { class member function get : { this } LambdaDeclareInline } ,
                dictionary initialize key : ("lambda type declare") { class member function get : { this } LambdaTypeDeclare } ,
                dictionary initialize key : ("loop break") { class member function get : { this } LoopBreak } ,
                dictionary initialize key : ("loop continue") { class member function get : { this } LoopContinue } ,
                dictionary initialize key : ("main end") { class member function get : { this } MainEnd } ,
                dictionary initialize key : ("main start") { class member function get : { this } MainStart } ,
                dictionary initialize key : ("native call") { class member function get : { this } NativeCall } ,
                dictionary initialize key : ("not") { class member function get : { this } Not } ,
                dictionary initialize key : ("operation") { class member function get : { this } Operation } ,
                dictionary initialize key : ("parenthesis") { class member function get : { this } Parenthesis } ,
                dictionary initialize key : ("print line") { class member function get : { this } PrintLine } ,
                dictionary initialize key : ("return") { class member function get : { this } Return } ,
                dictionary initialize key : ("this") { class member function get : { this } This } ,
                dictionary initialize key : ("throw") { class member function get : { this } Throw } ,
                dictionary initialize key : ("try end") { class member function get : { this } TryEnd} ,
                dictionary initialize key : ("try start") { class member function get : { this } TryStart } ,
                dictionary initialize key : ("type") { class member function get : { this } Type } ,
                dictionary initialize key : ("value") { class member function get : { this } Value } ,
                dictionary initialize key : ("variable declare") { class member function get : { this } VariableDeclare } ,
                dictionary initialize key : ("variable declare incomplete") { class member function get : { this } VariableDeclareIncomplete } ,
                dictionary initialize key : ("variable declare partial") { class member function get : { this } VariableDeclarePartial } ,
                dictionary initialize key : ("while end") { class member function get : { this } WhileEnd } ,
                dictionary initialize key : ("while start") { class member function get : { this } WhileStart }
            dictionary initialize end

            class member variable set incomplete : { this } OperationAliases { dictionary initialize start : string string }
                dictionary initialize key : "equals" "=" ,
                dictionary initialize key : "plus" "+" ,
                dictionary initialize key : "minus" "-" ,
                dictionary initialize key : "times" "*" ,
                dictionary initialize key : "divide" "/" ,
                dictionary initialize key : "increaseby" "+=" ,
                dictionary initialize key : "decreaseby" "-=" ,
                dictionary initialize key : "multiplyby" "*=" ,
                dictionary initialize key : "divideby" "/=" ,
                dictionary initialize key : "lessthan" "<" ,
                dictionary initialize key : "greaterthan" ">" ,
                dictionary initialize key : "lessthanequal" "<=" ,
                dictionary initialize key : "greaterthanequal" ">=" ,
                dictionary initialize key : "equalto" "==" ,
                dictionary initialize key : "notequalto" "!=" ,
                dictionary initialize key : "and" "&&" ,
                dictionary initialize key : "or" "||" ,
                dictionary initialize key : "mod" "%"
            dictionary initialize end
            
            class member variable set : { this } TypeAliases { dictionary initialize : string string }
            
            class member variable set : { this } ValueAliases { dictionary initialize : string string }

            class member variable set incomplete : { this } NativeFunctionAliases { dictionary initialize start : string { dictionary type : string string } }
                dictionary initialize key : ("array") { dictionary initialize : string { dictionary type : string string } } ,
                dictionary initialize key : ("dictionary") { dictionary initialize : string { dictionary type : string string } } ,
                dictionary initialize key : ("string") { dictionary initialize : string { dictionary type : string string } }
            dictionary initialize end
        class constructor end

        comment block : Gets

        class member function start : Language public getName string
            return : { class member variable get : { this } Name }
        class member function end

        class member function start : Language public getExtension string
            return : { class member variable get : { this } Extension }
        class member function end

        class member function start : Language public getPrintFunction string
            return : { class member variable get : { this } PrintFunction }
        class member function end

        class member function start : Language public getSemiColon string
            return : { class member variable get : { this } SemiColon }
        class member function end

        class member function start : Language public getCommentorBlockStart string
            return : { class member variable get : { this } CommentorBlockStart }
        class member function end

        class member function start : Language public getCommentorBlockEnd string
            return : { class member variable get : { this } CommentorBlockEnd }
        class member function end

        class member function start : Language public getCommentorInline string
            return : { class member variable get : { this } CommentorInline }
        class member function end

        class member function start : Language public getConditionStartLeft string
            return : { class member variable get : { this } ConditionStartLeft }
        class member function end

        class member function start : Language public getConditionStartRight string
            return : { class member variable get : { this } ConditionStartRight }
        class member function end

        class member function start : Language public getConditionContinueLeft string
            return : { class member variable get : { this } ConditionContinueLeft }
        class member function end

        class member function start : Language public getConditionContinueRight string
            return : { class member variable get : { this } ConditionContinueRight }
        class member function end

        class member function start : Language public getConditionEnd string
            return : { class member variable get : { this } ConditionEnd }
        class member function end

        class member function start : Language public getElif string
            return : { class member variable get : { this } Elif }
        class member function end

        class member function start : Language public getElse string
            return : { class member variable get : { this } Else }
        class member function end

        class member function start : Language public getIf string
            return : { class member variable get : { this } If }
        class member function end

        class member function start : Language public getAnd string
            return : { class member variable get : { this } And }
        class member function end

        class member function start : Language public getGreaterThan string
            return : { class member variable get : { this } GreaterThan }
        class member function end

        class member function start : Language public getGreaterThanOrEqual string
            return : { class member variable get : { this } GreaterThanOrEqual }
        class member function end

        class member function start : Language public getLessThan string
            return : { class member variable get : { this } LessThan }
        class member function end

        class member function start : Language public getLessThanOrEqual string
            return : { class member variable get : { this } LessThanOrEqual }
        class member function end

        class member function start : Language public getOr string
            return : { class member variable get : { this } Or }
        class member function end

        class member function start : Language public getUndefined string
            return : { class member variable get : { this } Undefined }
        class member function end

        class member function start : Language public getVariableTypesExplicit boolean
            return : { class member variable get : { this } VariableTypesExplicit }
        class member function end

        class member function start : Language public getVariableTypesAfterName boolean
            return : { class member variable get : { this } VariableTypesAfterName }
        class member function end

        class member function start : Language public getVariableTypeMarker string
            return : { class member variable get : { this } VariableTypeMarker }
        class member function end

        class member function start : Language public getVariableDeclareStart string
            return : { class member variable get : { this } VariableDeclareStart }
        class member function end

        class member function start : Language public getBooleanClass string
            return : { class member variable get : { this } BooleanClass }
        class member function end

        class member function start : Language public getTrue string
            return : { class member variable get : { this } True }
        class member function end

        class member function start : Language public getFalse string
            return : { class member variable get : { this } False }
        class member function end

        class member function start : Language public getNumberClass string
            return : { class member variable get : { this } NumberClass }
        class member function end

        class member function start : Language public getStringClass string
            return : { class member variable get : { this } StringClass }
        class member function end

        class member function start : Language public getStringLength string
            return : { class member variable get : { this } StringLength }
        class member function end

        class member function start : Language public getToString string
            return : { class member variable get : { this } ToString }
        class member function end

        class member function start : Language public getToStringAsFunction boolean
            return : { class member variable get : { this } ToStringAsFunction }
        class member function end

        class member function start : Language public getBreak string
            return : { class member variable get : { this } Break }
        class member function end

        class member function start : Language public getContinue string
            return : { class member variable get : { this } Continue }
        class member function end

        class member function start : Language public getForEachAsMethod boolean
            return : { class member variable get : { this } ForEachAsMethod }
        class member function end

        class member function start : Language public getForEachInner string
            return : { class member variable get : { this } ForEachInner }
        class member function end

        class member function start : Language public getForEachKeysAsStatic boolean
            return : { class member variable get : { this } ForEachKeysAsStatic }
        class member function end

        class member function start : Language public getForEachKeysGet string
            return : { class member variable get : { this } ForEachKeysGet }
        class member function end

        class member function start : Language public getForEachPairsGet string
            return : { class member variable get : { this } ForEachPairsGet }
        class member function end

        class member function start : Language public getForEachPairsPairClass string
            return : { class member variable get : { this } ForEachPairsPairClass }
        class member function end

        class member function start : Language public getForEachPairsAsPair boolean
            return : { class member variable get : { this } ForEachPairsAsPair }
        class member function end

        class member function start : Language public getForEachPairsRetrieveKey string
            return : { class member variable get : { this } ForEachPairsRetrieveKey }
        class member function end

        class member function start : Language public getForEachPairsRetrieveValue string
            return : { class member variable get : { this } ForEachPairsRetrieveValue }
        class member function end

        class member function start : Language public getForEachStarter string
            return : { class member variable get : { this } ForEachStarter }
        class member function end

        class member function start : Language public getRangedForLoops boolean
            return : { class member variable get : { this } RangedForLoops }
        class member function end

        class member function start : Language public getRangedForLoopsStart string
            return : { class member variable get : { this } RangedForLoopsStart }
        class member function end

        class member function start : Language public getRangedForLoopsMiddle string
            return : { class member variable get : { this } RangedForLoopsMiddle }
        class member function end

        class member function start : Language public getRangedForLoopsEnd string
            return : { class member variable get : { this } RangedForLoopsEnd }
        class member function end

        class member function start : Language public getArrayClass string
            return : { class member variable get : { this } ArrayClass }
        class member function end

        class member function start : Language public getArrayInitializationAsNew boolean
            return : { class member variable get : { this } ArrayInitializationAsNew }
        class member function end

        class member function start : Language public getArrayInitializationAsNewMultiplied boolean
            return : { class member variable get : { this } ArrayInitializationAsNewMultiplied }
        class member function end

        class member function start : Language public getArrayInitializationAsNewStatic boolean
            return : { class member variable get : { this } ArrayInitializationAsNewStatic }
        class member function end

        class member function start : Language public getArrayInitializationAsNewTyped boolean
            return : { class member variable get : { this } ArrayInitializationAsNewTyped }
        class member function end

        class member function start : Language public getArrayLength string
            return : { class member variable get : { this } ArrayLength }
        class member function end

        class member function start : Language public getArrayLengthAsFunction boolean
            return : { class member variable get : { this } ArrayLengthAsFunction }
        class member function end

        class member function start : Language public getArrayNegativeIndices boolean
            return : { class member variable get : { this } ArrayNegativeIndices }
        class member function end

        class member function start : Language public getDictionaryClass string
            return : { class member variable get : { this } DictionaryClass }
        class member function end
        
        class member function start : Language public getDictionaryInitializationAsNew boolean
            return : { class member variable get : { this } DictionaryInitializationAsNew }
        class member function end

        class member function start : Language public getDictionaryInitializeStarter string
            return : { class member variable get : { this } DictionaryInitializeStarter }
        class member function end

        class member function start : Language public getDictionaryInitializeEnder string
            return : { class member variable get : { this } DictionaryInitializeEnder }
        class member function end

        class member function start : Language public getDictionaryInitializeKeyComma string
            return : { class member variable get : { this } DictionaryInitializeKeyComma }
        class member function end

        class member function start : Language public getDictionaryInitializeKeyWithSemicolon boolean
            return : { class member variable get : { this } DictionaryInitializeKeyWithSemicolon }
        class member function end

        class member function start : Language public getDictionaryKeyCheckAsFunction boolean
            return : { class member variable get : { this } DictionaryKeyCheckAsFunction }
        class member function end

        class member function start : Language public getDictionaryKeyChecker string
            return : { class member variable get : { this } DictionaryKeyChecker }
        class member function end

        class member function start : Language public getDictionaryKeyLeft string
            return : { class member variable get : { this } DictionaryKeyLeft }
        class member function end

        class member function start : Language public getDictionaryKeyMiddle string
            return : { class member variable get : { this } DictionaryKeyMiddle }
        class member function end

        class member function start : Language public getDictionaryKeyRight string
            return : { class member variable get : { this } DictionaryKeyRight }
        class member function end

        class member function start : Language public getExceptionCatch string
            return : { class member variable get : { this } ExceptionCatch }
        class member function end

        class member function start : Language public getExceptionClass string
            return : { class member variable get : { this } ExceptionClass }
        class member function end

        class member function start : Language public getExceptionErrorPrefix string
            return : { class member variable get : { this } ExceptionErrorPrefix }
        class member function end

        class member function start : Language public getExceptionFinally string
            return : { class member variable get : { this } ExceptionFinally }
        class member function end

        class member function start : Language public getExceptionThrow string
            return : { class member variable get : { this } ExceptionThrow }
        class member function end

        class member function start : Language public getExceptionTry string
            return : { class member variable get : { this } ExceptionTry }
        class member function end

        class member function start : Language public getFunctionDefine string
            return : { class member variable get : { this } FunctionDefine }
        class member function end

        class member function start : Language public getFunctionDefineRight string
            return : { class member variable get : { this } FunctionDefineRight }
        class member function end

        class member function start : Language public getFunctionDefineEnd string
            return : { class member variable get : { this } FunctionDefineEnd }
        class member function end

        class member function start : Language public getFunctionReturnsExplicit boolean
            return : { class member variable get : { this } FunctionReturnsExplicit }
        class member function end

        class member function start : Language public getFunctionTypeAfterName boolean
            return : { class member variable get : { this } FunctionTypeAfterName }
        class member function end

        class member function start : Language public getFunctionTypeMarker string
            return : { class member variable get : { this } FunctionTypeMarker }
        class member function end

        class member function start : Language public getLambdaDeclareEnder string
            return : { class member variable get : { this } LambdaDeclareEnder }
        class member function end

        class member function start : Language public getLambdaDeclareMiddle string
            return : { class member variable get : { this } LambdaDeclareMiddle }
        class member function end

        class member function start : Language public getLambdaDeclareStarter string
            return : { class member variable get : { this } LambdaDeclareStarter }
        class member function end

        class member function start : Language public getLambdaTypeDeclarationAsInterface boolean
            return : { class member variable get : { this } LambdaTypeDeclarationAsInterface }
        class member function end

        class member function start : Language public getLambdaTypeDeclarationRequired boolean
            return : { class member variable get : { this } LambdaTypeDeclarationRequired }
        class member function end

        class member function start : Language public getLambdaTypeDeclarationEnd string[]
            return : { class member variable get : { this } LambdaTypeDeclarationEnd }
        class member function end

        class member function start : Language public getLambdaTypeDeclarationMiddle string[]
            return : { class member variable get : { this } LambdaTypeDeclarationMiddle }
        class member function end

        class member function start : Language public getLambdaTypeDeclarationStart string[]
            return : { class member variable get : { this } LambdaTypeDeclarationStart }
        class member function end

        class member function start : Language public getClassConstructorAsStatic boolean
            return : { class member variable get : { this } ClassConstructorAsStatic }
        class member function end

        class member function start : Language public getClassConstructorInheritedShorthand boolean
            return : { class member variable get : { this } ClassConstructorInheritedShorthand }
        class member function end

        class member function start : Language public getClassConstructorName string
            return : { class member variable get : { this } ClassConstructorName }
        class member function end

        class member function start : Language public getClassConstructorLoose boolean
            return : { class member variable get : { this } ClassConstructorLoose }
        class member function end

        class member function start : Language public getClassEnder string
            return : { class member variable get : { this } ClassEnder }
        class member function end

        class member function start : Language public getClassExtends string
            return : { class member variable get : { this } ClassExtends }
        class member function end

        class member function start : Language public getClassExtendsAsFunction boolean
            return : { class member variable get : { this } ClassExtendsAsFunction }
        class member function end

        class member function start : Language public getClassFunctionsTakeThis boolean
            return : { class member variable get : { this } ClassFunctionsTakeThis }
        class member function end

        class member function start : Language public getClassFunctionsStart string
            return : { class member variable get : { this } ClassFunctionsStart }
        class member function end

        class member function start : Language public getClassFunctionsThis string
            return : { class member variable get : { this } ClassFunctionsThis }
        class member function end

        class member function start : Language public getClassMemberFunctionGetBind boolean
            return : { class member variable get : { this } ClassMemberFunctionGetBind }
        class member function end

        class member function start : Language public getClassMemberFunctionGetEnd string
            return : { class member variable get : { this } ClassMemberFunctionGetEnd }
        class member function end

        class member function start : Language public getClassMemberFunctionGetStart string
            return : { class member variable get : { this } ClassMemberFunctionGetStart }
        class member function end

        class member function start : Language public getClassMemberVariableDefault string
            return : { class member variable get : { this } ClassMemberVariableDefault }
        class member function end

        class member function start : Language public getClassMemberVariablePrivacy boolean
            return : { class member variable get : { this } ClassMemberVariablePrivacy }
        class member function end

        class member function start : Language public getClassMemberVariableStarter string
            return : { class member variable get : { this } ClassMemberVariableStarter }
        class member function end

        class member function start : Language public getClassNewer string
            return : { class member variable get : { this } ClassNewer }
        class member function end

        class member function start : Language public getClassParentName string
            return : { class member variable get : { this } ClassParentName }
        class member function end

        class member function start : Language public getClassPrivacy boolean
            return : { class member variable get : { this } ClassPrivacy }
        class member function end

        class member function start : Language public getClassPublicAlias string
            return : { class member variable get : { this } ClassPublicAlias }
        class member function end

        class member function start : Language public getClassStaticLabel string
            return : { class member variable get : { this } ClassStaticLabel }
        class member function end

        class member function start : Language public getClassStaticFunctionDecorator string
            return : { class member variable get : { this } ClassStaticFunctionDecorator }
        class member function end

        class member function start : Language public getClassStaticFunctionRequiresDecorator boolean
            return : { class member variable get : { this } ClassStaticFunctionRequiresDecorator }
        class member function end

        class member function start : Language public getClassStartLeft string
            return : { class member variable get : { this } ClassStartLeft }
        class member function end

        class member function start : Language public getClassStartRight string
            return : { class member variable get : { this } ClassStartRight }
        class member function end

        class member function start : Language public getClassTemplates boolean
            return : { class member variable get : { this } ClassTemplates }
        class member function end

        class member function start : Language public getClassTemplatesBetween string
            return : { class member variable get : { this } ClassTemplatesBetween }
        class member function end

        class member function start : Language public getClassThis string
            return : { class member variable get : { this } ClassThis }
        class member function end

        class member function start : Language public getClassThisAccess string
            return : { class member variable get : { this } ClassThisAccess }
        class member function end

        class member function start : Language public getFileEndLine string
            return : { class member variable get : { this } FileEndLine }
        class member function end

        class member function start : Language public getFileStartLeft string
            return : { class member variable get : { this } FileStartLeft }
        class member function end

        class member function start : Language public getFileStartRight string
            return : { class member variable get : { this } FileStartRight }
        class member function end

        class member function start : Language public getIncludeDictionaryType string
            return : { class member variable get : { this } IncludeDictionaryType }
        class member function end
        
        class member function start : Language public getIncludeEnder string
            return : { class member variable get : { this } IncludeEnder }
        class member function end

        class member function start : Language public getIncludeFileExtension boolean
            return : { class member variable get : { this } IncludeFileExtension }
        class member function end

        class member function start : Language public getIncludeStarter string
            return : { class member variable get : { this } IncludeStarter }
        class member function end

        class member function start : Language public getMainEndLine string
            return : { class member variable get : { this } MainEndLine }
        class member function end

        class member function start : Language public getMainStartLine string
            return : { class member variable get : { this } MainStartLine }
        class member function end


        comment block : Sets

        class member function start : Language public setName Language value string
            class member variable set : { this } Name value
            return : { this }
        class member function end

        class member function start : Language public setExtension Language value string
            class member variable set : { this } Extension value
            return : { this }
        class member function end

        class member function start : Language public setPrintFunction Language value string
            class member variable set : { this } PrintFunction value
            return : { this }
        class member function end

        class member function start : Language public setSemiColon Language value string
            class member variable set : { this } SemiColon value
            return : { this }
        class member function end

        class member function start : Language public setCommentorBlockStart Language value string
            class member variable set : { this } CommentorBlockStart value
            return : { this }
        class member function end

        class member function start : Language public setCommentorBlockEnd Language value string
            class member variable set : { this } CommentorBlockEnd value
            return : { this }
        class member function end

        class member function start : Language public setCommentorInline Language value string
            class member variable set : { this } CommentorInline value
            return : { this }
        class member function end

        class member function start : Language public setConditionStartLeft Language value string
            class member variable set : { this } ConditionStartLeft value
            return : { this }
        class member function end

        class member function start : Language public setConditionStartRight Language value string
            class member variable set : { this } ConditionStartRight value
            return : { this }
        class member function end

        class member function start : Language public setConditionContinueLeft Language value string
            class member variable set : { this } ConditionContinueLeft value
            return : { this }
        class member function end

        class member function start : Language public setConditionContinueRight Language value string
            class member variable set : { this } ConditionContinueRight value
            return : { this }
        class member function end

        class member function start : Language public setConditionEnd Language value string
            class member variable set : { this } ConditionEnd value
            return : { this }
        class member function end

        class member function start : Language public setElif Language value string
            class member variable set : { this } Elif value
            return : { this }
        class member function end

        class member function start : Language public setElse Language value string
            class member variable set : { this } Else value
            return : { this }
        class member function end

        class member function start : Language public setIf Language value string
            class member variable set : { this } If value
            return : { this }
        class member function end

        class member function start : Language public setAnd Language value string
            class member variable set : { this } And value
            return : { this }
        class member function end

        class member function start : Language public setGreaterThan Language value string
            class member variable set : { this } GreaterThan value
            return : { this }
        class member function end

        class member function start : Language public setGreaterThanOrEqual Language value string
            class member variable set : { this } GreaterThanOrEqual value
            return : { this }
        class member function end

        class member function start : Language public setLessThan Language value string
            class member variable set : { this } LessThan value
            return : { this }
        class member function end

        class member function start : Language public setLessThanOrEqual Language value string
            class member variable set : { this } LessThanOrEqual value
            return : { this }
        class member function end

        class member function start : Language public setOr Language value string
            class member variable set : { this } Or value
            return : { this }
        class member function end

        class member function start : Language public setUndefined Language value string
            class member variable set : { this } Undefined value
            return : { this }
        class member function end

        class member function start : Language public setVariableTypesExplicit Language value boolean
            class member variable set : { this } VariableTypesExplicit value
            return : { this }
        class member function end

        class member function start : Language public setVariableTypesAfterName Language value boolean
            class member variable set : { this } VariableTypesAfterName value
            return : { this }
        class member function end

        class member function start : Language public setVariableTypeMarker Language value string
            class member variable set : { this } VariableTypeMarker value
            return : { this }
        class member function end

        class member function start : Language public setVariableDeclareStart Language value string
            class member variable set : { this } VariableDeclareStart value
            return : { this }
        class member function end

        class member function start : Language public setBooleanClass Language value string
            class member variable set : { this } BooleanClass value
            return : { this }
        class member function end

        class member function start : Language public setTrue Language value string
            class member variable set : { this } True value
            return : { this }
        class member function end

        class member function start : Language public setFalse Language value string
            class member variable set : { this } False value
            return : { this }
        class member function end

        class member function start : Language public setNumberClass Language value string
            class member variable set : { this } NumberClass value
            return : { this }
        class member function end

        class member function start : Language public setStringClass Language value string
            class member variable set : { this } StringClass value
            return : { this }
        class member function end

        class member function start : Language public setStringLength Language value string
            class member variable set : { this } StringLength value
            return : { this }
        class member function end

        class member function start : Language public setBreak Language value string
            class member variable set : { this } Break value
            return : { this }
        class member function end

        class member function start : Language public setContinue Language value string
            class member variable set : { this } Continue value
            return : { this }
        class member function end

        class member function start : Language public setForEachAsMethod Language value boolean
            class member variable set : { this } ForEachAsMethod value
            return : { this }
        class member function end

        class member function start : Language public setForEachInner Language value string
            class member variable set : { this } ForEachInner value
            return : { this }
        class member function end

        class member function start : Language public setForEachKeysAsStatic Language value boolean
            class member variable set : { this } ForEachKeysAsStatic value
            return : { this }
        class member function end

        class member function start : Language public setForEachKeysGet Language value string
            class member variable set : { this } ForEachKeysGet value
            return : { this }
        class member function end

        class member function start : Language public setForEachPairsGet Language value string
            class member variable set : { this } ForEachPairsGet value
            return : { this }
        class member function end

        class member function start : Language public setForEachPairsPairClass Language value string
            class member variable set : { this } ForEachPairsPairClass value
            return : { this }
        class member function end

        class member function start : Language public setForEachPairsAsPair Language value boolean
            class member variable set : { this } ForEachPairsAsPair value
            return : { this }
        class member function end

        class member function start : Language public setForEachPairsRetrieveKey Language value string
            class member variable set : { this } ForEachPairsRetrieveKey value
            return : { this }
        class member function end

        class member function start : Language public setForEachPairsRetrieveValue Language value string
            class member variable set : { this } ForEachPairsRetrieveValue value
            return : { this }
        class member function end

        class member function start : Language public setForEachStarter Language value string
            class member variable set : { this } ForEachStarter value
            return : { this }
        class member function end

        class member function start : Language public setRangedForLoops Language value boolean
            class member variable set : { this } RangedForLoops value
            return : { this }
        class member function end

        class member function start : Language public setRangedForLoopsStart Language value string
            class member variable set : { this } RangedForLoopsStart value
            return : { this }
        class member function end

        class member function start : Language public setRangedForLoopsMiddle Language value string
            class member variable set : { this } RangedForLoopsMiddle value
            return : { this }
        class member function end

        class member function start : Language public setRangedForLoopsEnd Language value string
            class member variable set : { this } RangedForLoopsEnd value
            return : { this }
        class member function end

        class member function start : Language public setToString Language value string
            class member variable set : { this } ToString value
            return : { this }
        class member function end

        class member function start : Language public setToStringAsFunction Language value boolean
            class member variable set : { this } ToStringAsFunction value
            return : { this }
        class member function end

        class member function start : Language public setArrayClass Language value string
            class member variable set : { this } ArrayClass value
            return : { this }
        class member function end

        class member function start : Language public setArrayInitializationAsNew Language value boolean
            class member variable set : { this } ArrayInitializationAsNew value
            return : { this }
        class member function end

        class member function start : Language public setArrayInitializationAsNewMultiplied Language value boolean
            class member variable set : { this } ArrayInitializationAsNewMultiplied value
            return : { this }
        class member function end

        class member function start : Language public setArrayInitializationAsNewTyped Language value boolean
            class member variable set : { this } ArrayInitializationAsNewTyped value
            return : { this }
        class member function end

        class member function start : Language public setArrayInitializationAsNewStatic Language value boolean
            class member variable set : { this } ArrayInitializationAsNewStatic value
            return : { this }
        class member function end

        class member function start : Language public setArrayLength Language value string
            class member variable set : { this } ArrayLength value
            return : { this }
        class member function end

        class member function start : Language public setArrayLengthAsFunction Language value boolean
            class member variable set : { this } ArrayLengthAsFunction value
            return : { this }
        class member function end

        class member function start : Language public setArrayNegativeIndices Language value boolean
            class member variable set : { this } ArrayNegativeIndices value
            return : { this }
        class member function end

        class member function start : Language public setExceptionCatch Language value string
            class member variable set : { this } ExceptionCatch value
            return : { this }
        class member function end

        class member function start : Language public setExceptionClass Language value string
            class member variable set : { this } ExceptionClass value
            return : { this }
        class member function end

        class member function start : Language public setExceptionErrorPrefix Language value string
            class member variable set : { this } ExceptionErrorPrefix value
            return : { this }
        class member function end

        class member function start : Language public setExceptionFinally Language value string
            class member variable set : { this } ExceptionFinally value
            return : { this }
        class member function end

        class member function start : Language public setExceptionThrow Language value string
            class member variable set : { this } ExceptionThrow value
            return : { this }
        class member function end

        class member function start : Language public setExceptionTry Language value string
            class member variable set : { this } ExceptionTry value
            return : { this }
        class member function end

        class member function start : Language public setFunctionDefine Language value string
            class member variable set : { this } FunctionDefine value
            return : { this }
        class member function end

        class member function start : Language public setFunctionDefineRight Language value string
            class member variable set : { this } FunctionDefineRight value
            return : { this }
        class member function end

        class member function start : Language public setFunctionDefineEnd Language value string
            class member variable set : { this } FunctionDefineEnd value
            return : { this }
        class member function end

        class member function start : Language public setFunctionReturnsExplicit Language value boolean
            class member variable set : { this } FunctionReturnsExplicit value
            return : { this }
        class member function end

        class member function start : Language public setFunctionTypeAfterName Language value boolean
            class member variable set : { this } FunctionTypeAfterName value
            return : { this }
        class member function end

        class member function start : Language public setFunctionTypeMarker Language value string
            class member variable set : { this } FunctionTypeMarker value
            return : { this }
        class member function end

        class member function start : Language public setLambdaDeclareEnder Language value string
            class member variable set : { this } LambdaDeclareEnder value
            return : { this }
        class member function end

        class member function start : Language public setLambdaDeclareMiddle Language value string
            class member variable set : { this } LambdaDeclareMiddle value
            return : { this }
        class member function end

        class member function start : Language public setLambdaDeclareStarter Language value string
            class member variable set : { this } LambdaDeclareStarter value
            return : { this }
        class member function end

        class member function start : Language public setLambdaTypeDeclarationAsInterface Language value boolean
            class member variable set : { this } LambdaTypeDeclarationAsInterface value
            return : { this }
        class member function end

        class member function start : Language public setLambdaTypeDeclarationRequired Language value boolean
            class member variable set : { this } LambdaTypeDeclarationRequired value
            return : { this }
        class member function end

        class member function start : Language public setLambdaTypeDeclarationEnd Language value string[]
            class member variable set : { this } LambdaTypeDeclarationEnd value
            return : { this }
        class member function end

        class member function start : Language public setLambdaTypeDeclarationMiddle Language value string[]
            class member variable set : { this } LambdaTypeDeclarationMiddle value
            return : { this }
        class member function end

        class member function start : Language public setLambdaTypeDeclarationStart Language value string[]
            class member variable set : { this } LambdaTypeDeclarationStart value
            return : { this }
        class member function end

        class member function start : Language public setDictionaryClass Language value string
            class member variable set : { this } DictionaryClass value
            return : { this }
        class member function end

        class member function start : Language public setDictionaryKeyCheckAsFunction Language value boolean
            class member variable set : { this } DictionaryKeyCheckAsFunction value
            return : { this }
        class member function end

        class member function start : Language public setDictionaryKeyChecker Language value string
            class member variable set : { this } DictionaryKeyChecker value
            return : { this }
        class member function end

        class member function start : Language public setDictionaryKeyLeft Language value string
            class member variable set : { this } DictionaryKeyLeft value
            return : { this }
        class member function end

        class member function start : Language public setDictionaryKeyMiddle Language value string
            class member variable set : { this } DictionaryKeyMiddle value
            return : { this }
        class member function end

        class member function start : Language public setDictionaryKeyRight Language value string
            class member variable set : { this } DictionaryKeyRight value
            return : { this }
        class member function end

        class member function start : Language public setDictionaryInitializationAsNew Language value boolean
            class member variable set : { this } DictionaryInitializationAsNew value
            return : { this }
        class member function end

        class member function start : Language public setDictionaryInitializeStarter Language value string
            class member variable set : { this } DictionaryInitializeStarter value
            return : { this }
        class member function end

        class member function start : Language public setDictionaryInitializeEnder Language value string
            class member variable set : { this } DictionaryInitializeEnder value
            return : { this }
        class member function end

        class member function start : Language public setDictionaryInitializeKeyComma Language value string
            class member variable set : { this } DictionaryInitializeKeyComma value
            return : { this }
        class member function end

        class member function start : Language public setDictionaryInitializeKeyWithSemicolon Language value boolean
            class member variable set : { this } DictionaryInitializeKeyWithSemicolon value
            return : { this }
        class member function end

        class member function start : Language public setClassConstructorAsStatic Language value boolean
            class member variable set : { this } ClassConstructorAsStatic value
            return : { this }
        class member function end

        class member function start : Language public setClassConstructorInheritedShorthand Language value boolean
            class member variable set : { this } ClassConstructorInheritedShorthand value
            return : { this }
        class member function end

        class member function start : Language public setClassConstructorName Language value string
            class member variable set : { this } ClassConstructorName value
            return : { this }
        class member function end

        class member function start : Language public setClassConstructorLoose Language value boolean
            class member variable set : { this } ClassConstructorLoose value
            return : { this }
        class member function end

        class member function start : Language public setClassEnder Language value string
            class member variable set : { this } ClassEnder value
            return : { this }
        class member function end

        class member function start : Language public setClassExtends Language value string
            class member variable set : { this } ClassExtends value
            return : { this }
        class member function end

        class member function start : Language public setClassExtendsAsFunction Language value boolean
            class member variable set : { this } ClassExtendsAsFunction value
            return : { this }
        class member function end

        class member function start : Language public setClassFunctionsTakeThis Language value boolean
            class member variable set : { this } ClassFunctionsTakeThis value
            return : { this }
        class member function end

        class member function start : Language public setClassFunctionsStart Language value string
            class member variable set : { this } ClassFunctionsStart value
            return : { this }
        class member function end

        class member function start : Language public setClassFunctionsThis Language value string
            class member variable set : { this } ClassFunctionsThis value
            return : { this }
        class member function end

        class member function start : Language public setClassMemberFunctionGetBind Language value boolean
            class member variable set : { this } ClassMemberFunctionGetBind value
            return : { this }
        class member function end

        class member function start : Language public setClassMemberFunctionGetEnd Language value string
            class member variable set : { this } ClassMemberFunctionGetEnd value
            return : { this }
        class member function end

        class member function start : Language public setClassMemberFunctionGetStart Language value string
            class member variable set : { this } ClassMemberFunctionGetStart value
            return : { this }
        class member function end

        class member function start : Language public setClassMemberVariableDefault Language value string
            class member variable set : { this } ClassMemberVariableDefault value
            return : { this }
        class member function end

        class member function start : Language public setClassMemberVariablePrivacy Language value boolean
            class member variable set : { this } ClassMemberVariablePrivacy value
            return : { this }
        class member function end

        class member function start : Language public setClassMemberVariableStarter Language value string
            class member variable set : { this } ClassMemberVariableStarter value
            return : { this }
        class member function end

        class member function start : Language public setClassNewer Language value string
            class member variable set : { this } ClassNewer value
            return : { this }
        class member function end

        class member function start : Language public setClassParentName Language value string
            class member variable set : { this } ClassParentName value
            return : { this }
        class member function end

        class member function start : Language public setClassPrivacy Language value boolean
            class member variable set : { this } ClassPrivacy value
            return : { this }
        class member function end

        class member function start : Language public setClassPublicAlias Language value string
            class member variable set : { this } ClassPublicAlias value
            return : { this }
        class member function end

        class member function start : Language public setClassStaticLabel Language value string
            class member variable set : { this } ClassStaticLabel value
            return : { this }
        class member function end

        class member function start : Language public setClassStaticFunctionDecorator Language value string
            class member variable set : { this } ClassStaticFunctionDecorator value
            return : { this }
        class member function end

        class member function start : Language public setClassStaticFunctionRequiresDecorator Language value boolean
            class member variable set : { this } ClassStaticFunctionRequiresDecorator value
            return : { this }
        class member function end

        class member function start : Language public setClassStartLeft Language value string
            class member variable set : { this } ClassStartLeft value
            return : { this }
        class member function end

        class member function start : Language public setClassStartRight Language value string
            class member variable set : { this } ClassStartRight value
            return : { this }
        class member function end

        class member function start : Language public setClassTemplates Language value boolean
            class member variable set : { this } ClassTemplates value
            return : { this }
        class member function end

        class member function start : Language public setClassTemplatesBetween Language value string
            class member variable set : { this } ClassTemplatesBetween value
            return : { this }
        class member function end

        class member function start : Language public setClassThis Language value string
            class member variable set : { this } ClassThis value
            return : { this }
        class member function end

        class member function start : Language public setClassThisAccess Language value string
            class member variable set : { this } ClassThisAccess value
            return : { this }
        class member function end

        class member function start : Language public setFileEndLine Language value string
            class member variable set : { this } FileEndLine value
            return : { this }
        class member function end

        class member function start : Language public setFileStartLeft Language value string
            class member variable set : { this } FileStartLeft value
            return : { this }
        class member function end

        class member function start : Language public setFileStartRight Language value string
            class member variable set : { this } FileStartRight value
            return : { this }
        class member function end

        class member function start : Language public setIncludeDictionaryType Language value string
            class member variable set : { this } IncludeDictionaryType value
            return : { this }
        class member function end

        class member function start : Language public setIncludeEnder Language value string
            class member variable set : { this } IncludeEnder value
            return : { this }
        class member function end

        class member function start : Language public setIncludeFileExtension Language value boolean
            class member variable set : { this } IncludeFileExtension value
            return : { this }
        class member function end

        class member function start : Language public setIncludeStarter Language value string
            class member variable set : { this } IncludeStarter value
            return : { this }
        class member function end

        class member function start : Language public setMainEndLine Language value string
            class member variable set : { this } MainEndLine value
            return : { this }
        class member function end

        class member function start : Language public setMainStartLine Language value string
            class member variable set : { this } MainStartLine value
            return : { this }
        class member function end

        
        comment block : (Array & Template parsing)

        class member function start : Language public parseType string text string
            if start : { class member function call : { this } typeContainsArray text }
                return : { class member function call : { this } parseTypeWithArray text }
            if end

            if start : { class member function call : { this } typeContainsTemplate text }
                return : { class member function call : { this } parseTypeWithTemplate text }
            if end

            return : { class member function call : { this } getTypeAlias text }
        class member function end

        class member function start : Language public typeContainsArray boolean text string
            return : { operation : { native call : string find text "[" } != -1 }
        class member function end

        class member function start : Language public typeContainsTemplate boolean text string
            return : { operation : { native call : string find text "<" } != -1 }
        class member function end

        class member function start : Language public parseTypeWithArray string text string
            variable declare : bracketIndex number { native call : string find text "[" }
            variable declare : name string { native call : string substring text 0 bracketIndex }
            variable declare : remainder string { native call : string substring text bracketIndex }

            return : { concatenate : { class member function call : { this } parseType name } remainder }
        class member function end

        class member function start : Language public parseTypeWithTemplate string text string
            variable declare : ltIndex number { native call : string find text "<" }
            variable declare : output string { native call : string substring text 0 ltIndex }
            
            if start : { not : { class member function call : { this } getClassTemplates } }
                return : output
            if end

            variable declare : typeStart number { operation : ltIndex plus 1 }
            variable declare : typeEnd number
            variable declare : typeCheck character

            operation : output increaseby "<"

            while start : { operation : typeStart lessthan { native call : string length text } }
                for numbers start : typeEnd typeStart lessthan { native call : string length text }
                    operation : typeCheck equals { array get item : text typeEnd }
                    if start : { operation : typeCheck equalto ',' or typeCheck equalto '<' or typeCheck equalto '>' or typeCheck equalto (' ') }
                        loop break
                    if end
                for end

                if start : { operation : typeEnd equalto { native call : string length text } }
                    loop break
                if end

                if start : { operation : typeStart equalto typeEnd }
                    operation : typeStart increaseby 1
                    loop continue
                if end

                operation : output increaseby { class member function call : { this } parseType { native call : string substring text typeStart typeEnd } }
                operation : output increaseby { class member function call : { this } getClassTemplatesBetween }
                operation : typeStart equals typeEnd plus 1
            while end

            operation : output increaseby { class member function call : { this } parseType { native call : string substring text typeStart { operation : { native call : string length text } minus 1 } } }
            operation : output increaseby ">"

            return : output
        class member function end


        comment block : Miscellaneous

        class member function start : Language public getAliasOrDefault string aliases { dictionary type : string string } key string
            if start : { dictionary key check : aliases key }
                return : { dictionary key get : aliases key }
            else start
                return : key
            if end
        class member function end

        class member function start : Language public getTypeAlias string key string
            return : { class member function call : { this } getAliasOrDefault { class member variable get : { this } TypeAliases } key }
        class member function end

        class member function start : Language public getOperationAlias string key string
            return : { class member function call : { this } getAliasOrDefault { class member variable get : { this } OperationAliases } key }
        class member function end

        class member function start : Language public getValueAlias string key string
            return : { class member function call : { this } getAliasOrDefault { class member variable get : { this } ValueAliases } key }
        class member function end

        class member function start : Language public addTypeAlias Language key string alias string
            dictionary key set : { class member variable get : { this } TypeAliases } key alias
            return : { this }
        class member function end

        class member function start : Language public addTypeAliases Language aliases { dictionary type : string string }
            variable declare : key string
            variable declare : alias string
            for each pairs start : pair key string alias string aliases
                class member function call : { this } addTypeAlias key { dictionary key get : aliases key }
            for end

            return : { this }
        class member function end

        class member function start : Language public addOperationAlias Language key string alias string
            dictionary key set : { class member variable get : { this } OperationAliases } key alias
            return : { this }
        class member function end

        class member function start : Language public addOperationAliases Language aliases { dictionary type : string string }
            variable declare : key string
            variable declare : alias string
            for each pairs start : pair key string alias string aliases
                class member function call : { this } addOperationAlias key { dictionary key get : aliases key }
            for end

            return : { this }
        class member function end

        class member function start : Language public addValueAlias Language key string alias string
            dictionary key set : { class member variable get : { this } ValueAliases } key alias
            return : { this }
        class member function end

        class member function start : Language public addValueAliases Language aliases { dictionary type : string string }
            variable declare : key string
            variable declare : alias string
            for each pairs start : pair key string alias string aliases
                class member function call : { this } addValueAlias key { dictionary key get : aliases key }
            for end

            return : { this }
        class member function end

        class member function start : Language public getNativeFunctionAlias { dictionary type : string string } className string memberName string
            return : { dictionary key get : { dictionary key get : { class member variable get : { this } NativeFunctionAliases } className } memberName }
        class member function end

        class member function start : Language public addNativeFunctionAlias Language className string memberName string aliasInfo { dictionary type : string string }
            class member variable set : { this } { dictionary key get : { dictionary key get : NativeFunctionAliases className } memberName } aliasInfo
            return : { this }
        class member function end

        class member function start : Language public addNativeFunctionAliases Language className string aliasInfos { dictionary type : string string string }
            variable declare : key string
            variable declare : aliasInfo { dictionary type : string string }
            for each pairs start : pair key string aliasInfo { dictionary type : string string } aliasInfos
                class member function call : { this } addNativeFunctionAlias className key aliasInfo
            for end

            return : { this }
        class member function end

        class member function start : Language public print mixed[] functionName string functionArgs string[] isInline boolean
            if start : { not : { dictionary key check : { class member variable get : { this } Printers } functionName } }
                throw : { operation : ("Function not found: ") plus functionName }
            if end

            return : { function call : { dictionary key get : { class member variable get : { this } Printers } functionName } functionArgs isInline }
        class member function end


        comment block : Printers

        comment line : string type[, string key, ...]
        class member function start : Language public ArrayInitialize mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "ArrayInitialize" functionArgs 1

            variable declare : arrayType string { class member function call : { this } parseType { array get item : functionArgs 0 } }
            variable declare : output string
            variable declare : i number

            if start : { class member function call : { this } getArrayInitializationAsNewTyped }
                operation : output = ("new ") plus arrayType plus ("[] { ")
            else start
                operation : output equals "["
            if end
            
            if start : { operation : { native call : array length functionArgs } greaterthan 1 }
                for numbers start : i 1 lessthan { operation : { native call : array length functionArgs } minus 1 }
                    operation : output increaseby { array get item : functionArgs i } plus (", ")
                for end

                operation : output increaseby { array get item : functionArgs i }
            if end

            if start : { class member function call : { this } getArrayInitializationAsNewTyped }
                operation : output increaseby (" }")
            else start
                operation : output increaseby "]"
            if end

            return : { array initialize : mixed output 0 }
        class member function end

        comment line : string type, string size
        class member function start : Language public ArrayInitializeSized mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "ArrayInitialize" functionArgs 2

            variable declare : arrayType string { class member function call : { this } parseType { array get item : functionArgs 0 } }
            variable declare : arraySize string { array get item : functionArgs 1 }
            variable declare : output string

            if start : { class member function call : { this } getArrayInitializationAsNewMultiplied }
                operation : output equals "[" plus { class member function call : { this } getUndefined } plus "]"
                return : { class member function call : { this } Operation { array initialize : string output "times" arraySize } isInline }
            if end

            if start : { class member function call : { this } getArrayInitializationAsNewStatic }
                operation : output equals { class member function call : { this } getArrayClass } plus ".new"
            else start
                operation : output equals ("new ")
            if end

            if start : { class member function call : { this } getArrayInitializationAsNewTyped }
                operation : output increaseby  arrayType plus "[" plus arraySize plus "]"
            else start
                if start : { not : { class member function call : { this } getArrayInitializationAsNewStatic } }
                    operation : output increaseby  { class member function call : { this } getArrayClass }
                if end
                operation : output increaseby  "(" plus arraySize plus ")"
            if end

            return : { array initialize : mixed output 0 }
        class member function end

        comment line : string name, string index
        class member function start : Language public ArrayGetItem mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "ArrayGetItem" functionArgs 1

            variable declare : name string { array get item : functionArgs 0 }
            variable declare : output string { operation : name plus "[" }
            variable declare : index string { array get item : functionArgs 1 }

            if start : { operation : { operation : { array get item : index 0 } notequalto "-" } or { class member function call : { this } getArrayNegativeIndices }
                operation : output increaseby  index
            else start
                operation : index equals { native call : string substring index 1 }
                operation : output increaseby { array get item : { class member function call : { this } Operation { array initialize : string { array get item : { class member function call : { this } NativeCall { array initialize : string "array" "length" name } true } 0 } "minus" "1" } true } 0 }
            if end

            operation : output increaseby "]"
            return : { array initialize : mixed output 0 }
        class member function end

        comment line : [string name]
        class member function start : Language public Catch mixed[] functionArgs string[] isInline boolean
            variable declare : output string { operation : { class member function call : { this } getExceptionCatch } plus { class member function call : { this } getExceptionClass } }

            if start : { operation : { native call : array length functionArgs } greaterthan 0 }
                operation : output increaseby { class member function call : { this } getExceptionErrorPrefix } plus { array get item : functionArgs 0 }
            if end

            operation : output increaseby { class member function call : { this } getConditionStartRight }

            return : { array initialize : mixed "\0" -1 output 1 }
        class member function end

        class member function start : Language public ClassConstructorEnd mixed[] functionArgs string[] isInline boolean
            return : { array initialize : mixed { class member function call : { this } getFunctionDefineEnd } -1 }
        class member function end

        comment line : string super, [string argumentName, string argumentType, ...]
        class member function start : Language public ClassConstructorInheritedCall mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "ClassConstructorInheritedCall" functionArgs 1

            variable declare : parentName string { class member function call : { this } getClassParentName }
            variable declare : callingArgsLength number { native call : array length functionArgs }
            variable declare : loopStart number 0
            variable declare : callingArgs string[]
            variable declare : callingResult mixed[]
            variable declare : i number

            comment line : Blank parentName indicates the super's class name should be used
            if start : { operation : { native call : string length parentName } equalto 0 }
                operation : parentName equals { class member function call : { this } parseType { array get item : functionArgs 0 } }
            if end

            comment line : Taking a reference to `this` as a paremeter increases the number of parameters
            if start : { class member function call : this getClassFunctionsTakeThis }
                operation : callingArgsLength increaseby 1
                operation : loopStart increaseby 1
            if end

            operation : callingArgs equals { array initialize sized : string callingArgsLength }
            operation : { array get item : callingArgs 0 } equals parentName

            if start : { class member function call : { this } getClassExtendsAsFunction }
                operation : { array get item : callingArgs 0 } increaseby "." plus { class member function call : { this } getClassConstructorName }
            if end

            if start : { class member function call : { this } getClassFunctionsTakeThis }
                operation : { array get item : callingArgs 1 } equals { class member function call : { this } getClassThis }
            if end

            for numbers start : i loopStart lessthan { native call : array length functionArgs }
                operation : { array get item : callingArgs { operation : i plus 1 } } equals { array get item : functionArgs i }
            for end

            return : { class member function call : { this } FunctionCall callingArgs isInline }
        class member function end

        comment line : string name[, string superCall[, string argumentName, string argumentType, ...]]
        class member function start : Language public ClassConstructorInheritedStart mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "ClassConstructorInheritedStart" functionArgs 1

            if start : { operation : { native call : array length functionArgs } equalto 1 }
                return : { class member function call : { this } ClassConstructorStart functionArgs isInline }
            if end

            variable declare : generalCall mixed[]
            variable declare : callingArgs string[]
            variable declare : output mixed[]
            variable declare : i number

            comment line : Populate the arguments that will be passed to the actual method
            if start : { operation : { native call : array length functionArgs } greaterthan 2 }
                operation : callingArgs equals { array initialize sized : string { operation : { native call : array length functionArgs } minus 1 }

                for numbers start : i 2 lessthan { native call : array length functionArgs }
                    operation : { array get item : callingArgs { operation : i minus 1 } } equals { array get item : functionArgs i }
                for end

                operation : { array get item : callingArgs 0 } equals { array get item : functionArgs 0 }
            else start:
                operation : callingArgs equals { array initialize : string { array get item : functionArgs 0 } }
            if end

            operation : generalCall equals { class member function call : { this } ClassConstructorStart callingArgs isInline }

            if start : { class member function call : { this } getClassConstructorInheritedShorthand }
                comment line : "Shorthand" usage, like in C#, comes before FunctionDefineRight
                operation : output equals { array initialize sized : string { native call : array length generalCall } }
                operation : { array get item : output 0 } equals { native call : string substring { array get item : generalCall 0 } 0 { operation : { native call : string length { array get item : generalCall 0 } } minus { native call : string length { class member function call : { this } getFunctionDefineRight } } } }
                operation : { array get item : output 0 } increaseby { array get item : functionArgs 1 } plus { class member function call : { this } getFunctionDefineRight }

                for numbers start : i 1 lessthan { native call : array length generalCall }
                    operation : { array get item : output i } equals { array get item : generalCall i }
                for end
            else start
                comment line : In-function usage, like in Python, comes within the function
                operation : output equals { array initialize sized : string { operation : { native call : array length generalCall } plus 2 } }
                operation : { array get item : output { operation : { native call : array length output } minus 1 } } equals 0
                operation : { array get item : output { operation : { native call : array length output } minus 2 } } equals { array get item : functionArgs 1 }
                operation : { array get item : output { operation : { native call : array length generalCall } minus 1 } } equals { array get item : generalCall { operation : { native call : array length generalCall } minus 1 } }

                if start : { not : isInline }
                    operation : { array get item : output { operation : { native call : array length output } minus 2 } } increaseby { class member function call : this getSemiColon }
                if end

                for numbers start : i 0 lessthan { operation : { native call : array length generalCall } minus 1 }
                    operation : { array get item : output i } equals { array get item : generalCall i }
                for end
            if end

            return : output
        class member function end

        comment line : string name[, string argumentName, string argumentType, ...]
        class member function start : Language public ClassConstructorStart mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "ClassConstructorStart" functionArgs 1

            variable declare : output string { class member function call : { this } getClassConstructorName }
            variable declare : variableDeclarationArgs string[] { array initialize : string }
            variable declare : i number

            if start : { class member function call : { this } getClassConstructorLoose }
                operation : output equals { class member function call : { this } getClassFunctionsStart } plus output
            if end

            if start : { operation : { native call : string length output } equalto 0 }
                operation : output equals { array get item : functionArgs 0 }
            if end

            operation : output increaseby "("

            comment line : Languages like Python take a "self" or "this" equivalent first
            if start : { class member function call : { this } getClassFunctionsTakeThis }
                if start : { class member function call : { this } getClassFunctionsTakeThis }
                    operation : output increaseby (", ")
                if end

                for numbers start : i 1 lessthan { native call : array length functionArgs } 2
                    operation : { array get item : variableDeclarationArgs 0 } equals { array get item : functionArgs i }
                    operation : { array get item : variableDeclarationArgs 1 } equals { array get item : functionArgs i + 1 }

                    operation : output increaseby { array get item : { class member function call : { this } VariableDeclarePartial variableDeclarationArgs true } 0 } plus (", ")
                for end

                comment line : The last argument does not have the last ", " at the end
                operation : output equals { native call : string substring output 0 { operation : { native call : array length output } - 2 } }
            if end

            operation : output increaseby ")" plus { class member function call : { this } getFunctionDefineRight }
            return : { array initialize : mixed output 1}
        class member function end

        class member function start : Language public ClassEnd mixed[] functionArgs string[] isInline boolean
            return : { array initialize : mixed { class member function call : { this } getClassEnder } -1 }
        class member function end

        comment line : string variable, string function[, string argumentName, ...]
        class member function start : Language public ClassMemberFunctionCall mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "ClassMemberFunctionCall" functionArgs 2

            variable declare : output string { operation : { array get item : functionArgs 0 } plus "." plus { array get item : functionArgs 1 } plus "(" }
            variable declare : i number

            if start : { operation : { native call : array length functionArgs } greaterthan 2 }
                for numbers start : i 2 lessthan { operation : { native call : array length functionArgs } minus 1 }
                    operation : output increaseby { array get item : functionArgs i } plus (", ")
                for end
                operation : output increaseby { array get item : functionArgs i }
            if end

            operation : output increaseby ")"

            if start : { not : isInline }
                operation : output increaseby { class member function call : { this } getSemiColon }
            if end

            return : { array initialize : mixed output 0 }
        class member function end

        class member function start : Language public ClassMemberFunctionEnd mixed[] functionArgs string[] isInline boolean
            return : { array initialize : mixed { class member function call : { this } getFunctionDefineEnd } -1 }
        class member function end

        comment line : string variable, string function
        class member function start : Language public ClassMemberFunctionGet mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "ClassMemberFunctionStart" functionArgs 2

            variable declare : output string ""

            operation : output increaseby { class member function call : { this } getClassMemberFunctionGetStart } plus { array get item : functionArgs 0 }
            operation : output increaseby "." plus { array get item : functionArgs 1 } plus { class member function call : this getClassMemberFunctionGetEnd }

            if start : { class member function call : { this } getClassMemberFunctionGetBind }
                operation : output increaseby "(" plus { array get item : functionArgs 0 } plus ")"
            if end

            return : { array initialize : mixed output 0 }
        class member function end

        comment line : string class, string visibility, string name, string return[, string argumentName, string argumentType, ...]
        class member function start : Language public ClassMemberFunctionStart mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "ClassMemberFunctionStart" functionArgs 4

            variable declare : output string { class member function call : { this } getClassFunctionsStart }
            variable declare : variableDeclarationArgs string[] { array initialize : string }
            variable declare : i number

            if start : { operation : { class member function call : { this } getFunctionReturnsExplicit } and { not : { class member function call : { this } getFunctionTypeAfterName } }
                operation : output += { class member function call : { this } parseType { array get item : functionArgs 3 } } plus (" ")
            if end

            if start : { class member function call : { this } getClassPrivacy }
                operation : output equals { array get item : functionArgs 1 } plus (" ") plus output
            if end

            operation : output increaseby { array get item : functionArgs 2 } plus "("

            if start : { class member function call : { this } getClassFunctionsTakeThis }
                operation : { array get item : variableDeclarationArgs 0 } equals { class member function call : { this } getClassFunctionsThis }
                operation : { array get item : variableDeclarationArgs 1 } equals { array get item : functionArgs 0 }

                operation : output increaseby { array get item : { class member function call : { this } VariableDeclarePartial variableDeclarationArgs true } 0 }
            if end

            comment line : All arguments are added using VariableDeclarePartial
            if start : { operation : { native call : array length functionArgs } greaterthan 4 }
                if start : { class member function call : { this } getClassFunctionsTakeThis }
                    operation : output increaseby (", ")
                if end

                for numbers start : i 4 lessthan { native call : array length functionArgs } 2
                    operation : { array get item : variableDeclarationArgs 0 } equals { array get item : functionArgs i }
                    operation : { array get item : variableDeclarationArgs 1 } equals { array get item : functionArgs { operation : i + 1 } }

                    operation : output increaseby { array get item : { class member function call : { this } VariableDeclarePartial variableDeclarationArgs true } 0 } plus (", ")
                for end

                comment line : The last argument does not have the last ", " at the end
                operation : output equals { native call : string substring output 0 { operation : { native call : string length output } minus 2 } }
            if end

            operation : output increaseby ")"

            if start : { operation : { class member function call : { this } getFunctionReturnsExplicit } and { class member function call : { this } getFunctionTypeAfterName } }
                operation : output increaseby { class member function call : { this } getFunctionTypeMarker } plus { class member function call : { this } parseType { array get item : functionArgs 3 } }
            if end

            operation : output increaseby { class member function call : { this } getFunctionDefineRight }
            return : { array initialize : mixed output 1 }
        class member function end

        comment line : string name, string visibility, string type
        class member function start : Language public ClassMemberVariableDeclare mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "ClassMemberVariableDeclare" functionArgs 3

            variable declare : variableType string { class member function call : { this } parseType { array get item : functionArgs 2 } }
            variable declare : variableDeclarationArgs string[]
            variable declare : variableDeclared mixed[]

            if start : { operation : { class member function call : { this } getClassMemberVariableDefault } notequalto "" }
                operation : variableDeclarationArgs equals { array initialize : string { array get item : functionArgs 0 } variableType { class member function call : { this } getClassMemberVariableDefault } }
            else start
                operation : variableDeclarationArgs equals { array initialize : string { array get item : functionArgs 0 } variableType }
            if end

            operation : variableDeclared equals { class member function call : { this } VariableDeclarePartial variableDeclarationArgs isInline }
            operation : { array get item : variableDeclared 1 } equals 0

            if start : { not : isInline }
                operation : { array get item : variableDeclared 0 } equals { array get item : variableDeclared 0 } plus { class member function call : { this } getSemiColon }
            if end

            if start : { class member function call : { this } getClassMemberVariablePrivacy }
                operation : { array get item : variableDeclared 0 } equals { array get item : functionArgs 1 } plus (" ") plus { array get item : variableDeclared 0 }
            if end

            operation : { array get item : variableDeclared 0 } equals { class member function call : { this } getClassMemberVariableStarter } plus { array get item : variableDeclared 0 }

            return : variableDeclared
        class member function end

        comment line : string name, string variable
        class member function start : Language public ClassMemberVariableGet mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "ClassMemberVariableGet" functionArgs 2

            return : { array initialize : mixed { operation : { array get item : functionArgs 0 } plus { class member function call : { this } getClassThisAccess } plus { array get item : functionArgs 1 } } 0 }
        class member function end

        comment line : string variable, string name, string value
        class member function start : Language public ClassMemberVariableSet mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "ClassMemberVariableSet" functionArgs 3

            variable declare : output mixed[] { class member function call : { this } ClassMemberVariableSetIncomplete functionArgs isInline }

            operation : { array get item : output 0 } increaseby { class member function call : { this } getSemiColon }
            operation : { array get item : output 1 } equals 0

            return : output
        class member function end

        comment line : string name, string variable, string value
        class member function start : Language public ClassMemberVariableSetIncomplete mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "ClassMemberVariableSetIncomplete" functionArgs 3

            variable declare : output string { operation : { array get item : functionArgs 0 } plus { class member function call : { this } getClassThisAccess } }

            operation : output increaseby { array get item : functionArgs 1 } plus (" ") plus { class member function call : { this } getOperationAlias "equals" } plus (" ") plus { array get item : functionArgs 2 }

            return : { array initialize : mixed output 1}
        class member function end

        comment line : string class, string function[, string argumentName, ...]
        class member function start : Language public ClassStaticFunctionCall mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "ClassStaticFunctionCall" functionArgs 2

            variable declare : output string { operation : { array get item : functionArgs 0 } plus "." plus { array get item : functionArgs 1 } plus "(" }
            variable declare : i number

            if start : { operation : { native call : array length functionArgs } greaterthan 2 }
                for numbers start : i 2 lessthan { operation : { native call : array length functionArgs } minus 1 }
                    operation : output increaseby { array get item : functionArgs i } plus (", ")
                for end

                operation : output increaseby { array get item : functionArgs i }
            if end

            operation : output increaseby ")"

            if start : { not : isInline }
                operation : output increaseby { class member function call : { this } getSemiColon }
            if end

            return : { array initialize : mixed output 0 }
        class member function end

        class member function start : Language public ClassStaticFunctionEnd mixed[] functionArgs string[] isInline boolean
            return : { array initialize : mixed { class member function call : { this } getFunctionDefineEnd } -1 }
        class member function end

        comment line : string class, string function
        class member function start : Language public ClassStaticFunctionGet mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "ClassStaticFunctionGet" functionArgs 2

            variable declare : output string ""

            operation : output increaseby { class member function call : { this } getClassMemberFunctionGetStart } plus { array get item : functionArgs 0 }
            operation : output increaseby "." plus { array get item : functionArgs 1 } plus { class member function call : { this } getClassMemberFunctionGetEnd }

            if start : { class member function call : { this } getClassMemberFunctionGetBind }
                operation : output increaseby "(" plus { array get item : functionArgs 0 } plus ")"
            if end

            return : { array initialize : mixed output 0 }
        class member function end

        comment line : string class, string visibility, string name, string return[, string argumentName, string argumentType, ...]
        class member function start : Language public ClassStaticFunctionStart mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "ClassStaticFunctionStart" functionArgs 4

            variable declare : output string { class member function call : { this } getClassFunctionsStart }
            variable declare : variableDeclarationArgs string[] { array initialize : string }
            variable declare : i number

            if start : { operation : { class member function call : { this } getFunctionReturnsExplicit } and { not : { class member function call : { this } getFunctionTypeAfterName } } }
                operation : output increaseby { class member function call : { this } parseType { array get item : functionArgs 3 } } plus (" ")
            if end

            operation : output equals { class member function call : { this } getClassStaticLabel } plus output

            if start : { class member function call : { this } getClassPrivacy }
                operation : output equals { array get item : functionArgs 1 } plus (" ") plus output
            if end

            operation : output increaseby { array get item : functionArgs 2 } plus "("

            comment line : All arguments are added using VariableDeclarePartial
            if start : { operation : { native call : array length functionArgs } greaterthan 4 }
                if start : { class member function call : { this } getClassFunctionsTakeThis }
                    operation : output increaseby (", ")
                if end

                for numbers start : i 4 lessthan { native call : array length functionArgs } 2
                    operation : { array get item : variableDeclarationArgs 0 } equals { array get item : functionArgs i }
                    operation : { array get item : variableDeclarationArgs 1 } equals { array get item : functionArgs { operation : i plus 1 } }

                    operation : output increaseby { array get item : { class member function call : { this } VariableDeclarePartial variableDeclarationArgs true } 0 } plus (", ")
                for end

                comment line : The last argument does not have the last ", " at the end
                operation : output equals { native call : string substring output 0 { operation : { native call : string length output } minus 2 } }
            if end

            operation : output increaseby ")"

            if start : { operation : { class member function call : { this } getFunctionReturnsExplicit } and { class member function call : { this } getFunctionTypeAfterName } }
                operation : output increaseby { class member function call : { this } getFunctionTypeMarker } plus { class member function call : { this } parseType { array get item : functionArgs 3 } }
            if end
            
            if start : { class member function call : { this } getClassStaticFunctionRequiresDecorator }
                return : { array initialize : mixed { class member function call : { this } getClassStaticFunctionDecorator } 0 output 1 }
            else start
                return : { array initialize : mixed output 1}
            if end
        class member function end

        comment line : string class, string visibility, string type[, string value]
        class member function start : Language public ClassStaticVariableDeclare mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "ClassStaticVariableDeclare" functionArgs 3

            variable declare : variableType string { class member function call : { this } parseType { array get item : functionArgs 2 } }
            variable declare : variableDeclarationArgs string[]
            variable declare : variableDeclared mixed[]

            if start : { operation : { native call : array length functionArgs } greaterthan 3 }
                operation : variableDeclarationArgs equals { array initialize : string { array get item : functionArgs 0 } variableType { array get item : functionArgs 3 } }
            elif start : { operation : { class member function call : { this } getClassMemberVariableDefault } notequalto "" }
                operation : variableDeclarationArgs equals { array initialize : string { array get item : functionArgs 0 } variableType { class member function call : { this } getClassMemberVariableDefault } }
            else start
                operation : variableDeclarationArgs equals { array initialize : string { array get item : functionArgs 0 } variableType }
            if end

            operation : variableDeclared equals { class member function call : { this } VariableDeclarePartial variableDeclarationArgs isInline }
            operation : { array get item : variableDeclared 0 } equals { class member function call : { this } getClassStaticLabel } plus { array get item : variableDeclared 0 }
            operation : { array get item : variableDeclared 1 } equals 0

            if start : { not : isInline }
                operation : { array get item : variableDeclared 0 } equals { array get item : variableDeclared 0 } plus { class member function call : { this } getSemiColon }
            if end

            if start : { class member function call : { this } getClassMemberVariablePrivacy }
                operation : { array get item : variableDeclared 0 } equals { array get item : functionArgs 1 } plus (" ") plus { array get item : variableDeclared 0 }
            if end

            operation : { array get item : variableDeclared 0 } equals { class member function call : { this } getClassMemberVariableStarter } plus { array get item : variableDeclared 0 }

            return : variableDeclared
        class member function end

        comment line : string class, string name
        class member function start : Language public ClassStaticVariableGet mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "ClassStaticVariableGet" functionArgs 2

            return : { array initialize : mixed { operation : { array get item : functionArgs 0 } plus "." plus { array get item : functionArgs 1 } } 0 }
        class member function end

        comment line : string class, string name, string value
        class member function start : Language public ClassStaticVariableSet mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "ClassStaticVariableSet" functionArgs 3

            variable declare : output string { operation : { array get item : functionArgs 0 } plus "." plus { array get item : functionArgs 1 } plus (" ") }

            operation : output increaseby { class member function call : { this } getOperationAlias "equals" } plus (" ") plus { array get item : functionArgs 2 }
            operation : output increaseby { class member function call : { this } getSemiColon }

            return : { array initialize : mixed output 0 }
        class member function end

        comment line : string name[, string parentClass]
        class member function start : Language public ClassStart mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "ClassStart" functionArgs 1

            variable declare : output string { class member function call : { this } getClassStartLeft }
            operation : output increaseby { class member function call : { this } parseType { array get item : functionArgs 0 } }

            if start : { operation : { native call : array length functionArgs } greaterthan 1 }
                if start : { class member function call : { this } getClassExtendsAsFunction }
                    operation : output increaseby "(" plus { class member function call : { this } parseType { array get item : functionArgs 1 } } plus ")"
                else start
                    operation : output increaseby (" ") plus { class member function call : { this } getClassExtends } plus (" ") plus { class member function call : { this } parseType { array get item : functionArgs 1 } } plus (" ")
                if end
            if end

            operation : output increaseby { class member function call : { this } getClassStartRight }

            if start : { class member function call : { this } getClassPrivacy }
                operation : output equals { class member function call : { this } getClassPublicAlias } plus output
            if end
            
            return : { array initialize : mixed output 1 }
        class member function end

        comment line : string class[, string argumentName, string argumentType, ...]
        class member function start : Language public ClassNew mixed[] functionArgs string[] isInline boolean
            class member function call :  { this } requireArgumentsLength "ClassNew" functionArgs 1

            variable declare : output string
            variable declare : i number

            if start : { class member function call : { this } getClassConstructorAsStatic }
                operation : output equals { class member function call : { this } parseType { array get item : functionArgs 0 } } plus "." plus { class member function call : { this } getClassNewer } plus "("
            else start
                operation : output equals { class member function call : { this } getClassNewer } plus { class member function call : { this } parseType { array get item : functionArgs 0 } } plus "("
            if end

            if start : { operation : { native call : array length functionArgs } greaterthan 1 }
                for numbers start : i 1 lessthan { native call : array length functionArgs }
                    operation : output increaseby { array get item : functionArgs i } plus (", ")
                for end

                comment line : The last argument does not have the last ", " at the end
                operation : output equals { native call : string substring output 0 { operation : { native call : string length output } minus 2 }
            if end

            operation : output increaseby ")"

            if start : { not : isInline }
                operation : output increaseby { class member function call : { this } getSemiColon }
            if end

            return : { array initialize : mixed output 0 }
        class member function end

        comment line : [string message, ...]
        class member function start : Language public CommentBlock mixed[] functionArgs string[] isInline boolean
            variable declare : output mixed[] { array initialize sized : mixed { operation : { parenthesis : { operation : { native call : array length functionArgs } plus 2 } } times 2 } }
            variable declare : i number

            operation : { array get item : output 0 } equals { class member function call : { this } getCommentorBlockStart }
            operation : { array get item : output 1 } equals 0

            for numbers start : i 0 lessthan { native call : array length functionArgs }
                operation : { array get item : output { operation : i times 1 plus 2 } } equals { array get item : functionArgs i }
                operation : { array get item : output { operation : i times 2 plus 3 } } equals 0
            for end
            
            operation : { array get item : output { operation : i times 2 plus 2 } } equals { class member function call : { this } getCommentorBlockEnd }
            operation : { array get item : output { operation : i times 2 plus 3 } } equals 0

            return : output
        class member function end

        comment line : [string message, ...]
        class member function start : Language public CommentLine mixed[] functionArgs string[] isInline boolean
            variable declare : output string { operation : { class member function call : { this } getCommentorInline } plus (" ") }
            variable declare : i number

            for numbers start : i 0 lessthan { operation : { native call : array length functionArgs } minus 1 }
                operation : output increaseby { operation : { array get item : functionArgs i } plus (" ") }
            for end
            operation : output increaseby { array get item : functionArgs i }

            return : { array initialize : mixed output 0 }
        class member function end

        comment line : [string message, ...]
        class member function start : Language public CommentInline mixed[] functionArgs string[] isInline boolean
            variable declare : result mixed[] { class member function call : { this } CommentLine functionArgs isInline }

            operation : { array get item : result 1 } equals { class static variable get : Language INT_MIN }

            return : result
        class member function end

        comment line : string left, string comparison, string right
        class member function start : Language public Comparison mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "Comparison" functionArgs 3

            return : { array initialize : mixed { operation : { array get item : functionArgs 0 } plus (" ") plus { class member function call : { this } getOperationAlias { array get item : functionArgs 1 } } plus (" ") plus { array get item : functionArgs 2 } } 0 }
        class member function end

        comment line : string left, string right
        class member function start : Language public Concatenate mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "Comparison" functionArgs 2

            variable declare : output string

            if start : { class member function call : { this } getToStringAsFunction }
                operation : output equals { class member function call : { this } toString } plus "(" plus { array get item : functionArgs 0 } plus ")"
                operation : output increaseby (" ") plus { class member function call : { this } getOperationAlias "plus" } plus (" ")
                operation : output increaseby { class member function call : { this } getToString } plus "(" plus { array get item : functionArgs 1 } plus ")"
            else start
                operation : output equals { array get item : functionArgs 0 } plus { class member function call : { this } getToString }
                operation : output increaseby (" ") plus { class member function call : { this } getOperationAlias "plus" } plus (" ")
                operation : output increaseby { array get item : functionArgs 1 } plus { class member function call : { this } getToString }
            if end

            if start : { not : isInline }
                operation : output increaseby { class member function call : { this } getSemiColon }
            if end

            return : { array initialize : mixed output 0 }
        class member function end

        comment line : string name, string key
        class member function start : Language public DictionaryKeyCheck mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "DictionaryKeyCheck" functionArgs 2

            variable declare : output string

            if start : { class member function call : { this } getDictionaryKeyCheckAsFunction }
                operation : output equals { array get item : functionArgs 0 } plus "." plus { class member function call : { this } getDictionaryKeyChecker } plus "(" plus { array get item : functionArgs 1 } plus ")"
            else start
                operation : output equals { array get item : functionArgs 1 } plus { class member function call : { this } getDictionaryKeyChecker } plus { array get item : functionArgs 0 }
            if end

            return : { array initialize : mixed output 0 }
        class member function end

        comment line : string name, string key
        class member function start : Language public DictionaryKeyGet mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "DictionaryKeyGet" functionArgs 2

            return : { array initialize : mixed { operation : { array get item : functionArgs 0 } plus "[" plus { array get item : functionArgs 1 } plus "]" } 0 }
        class member function end

        comment line : string name, string key, string value
        class member function start : Language public DictionaryKeySet mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "DictionaryKeySet" functionArgs 3

            variable declare : output string { operation : { array get item : functionArgs 0 } plus "[" plus { array get item : functionArgs 1 } plus ("] = ") plus { array get item : functionArgs 2 } }

            if start : { not : isInline }
                operation : output increaseby { class member function call : { this } getSemiColon }
            if end

            return : { array initialize : mixed output 0 }
        class member function end

        comment line : string key, string value
        class member function start : Language public DictionaryInitialize mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "DictionaryInitialize" functionArgs 2

            variable declare : dictionaryType string { array get item : { class member function call : { this } DictionaryType functionArgs true } 0 }
            variable declare : output string

            if start : { class member function call : { this } getDictionaryInitializationAsNew }
                operation : output equals ("new ") plus dictionaryType plus "()"
            else start
                operation : output equals "{}"
            if end

            return : { array initialize : mixed output 0 }
        class member function end

        class member function start : Language public DictionaryInitializeEnd mixed[] functionArgs string[] isInline boolean
            variable declare : output string { class member function call : { this } getDictionaryInitializeEnder }

            if start : { not : isInline }
                operation : output increaseby { class member function call : { this } getSemiColon }
            if end

            return : { array initialize : mixed output -1 }
        class member function end

        comment line : string key, string value[, string comma]
        class member function start : Language public DictionaryInitializeKey mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "DictionaryInitializeKey" functionArgs 2

            variable declare : output string { class member function call : { this } getDictionaryKeyLeft }
            operation : output increaseby { array get item : functionArgs 0 }
            operation : output increaseby { class member function call : { this } getDictionaryKeyMiddle }
            operation : output increaseby { array get item : functionArgs 1 }
            operation : output increaseby { class member function call : { this } getDictionaryKeyRight }

            if start : { operation : { operation : { native call : array length functionArgs } greaterthan 2 } or { class member function call : { this } getDictionaryInitializeKeyWithSemicolon } }
                operation : output increaseby { class member function call : { this } getDictionaryInitializeKeyComma }
            if end

            return : { array initialize : mixed output 0 }
        class member function end

        comment line : string keyType, string valueType
        class member function start : Language public DictionaryInitializeStart mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "DictionaryInitializeStart" functionArgs 2

            variable declare : dictionaryType string
            variable declare : output string

            if start : { class member function call : { this } getDictionaryInitializationAsNew }
                operation : dictionaryType equals { array get item : { class member function call : { this } DictionaryType functionArgs true } 0 }
            else start
                operation : dictionaryType equals ""
            if end

            if start : { class member function call : { this } getDictionaryInitializationAsNew }
                operation : output equals ("new ")
            else start
                operation : output equals ""
            if end

            operation : output increaseby dictionaryType
            operation : output increaseby { class member function call : { this } getDictionaryInitializeStarter }

            return : { array initialize : mixed output 0 }
        class member function end

        comment line : string keyType[, ...], string valueType
        class member function start : Language public DictionaryType mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "DictionaryType" functionArgs 2

            if start : { not : { class member function call : { this } getVariableTypesExplicit } }
                return : { array initialize : mixed "" 0 }
            if end

            if start : { not : { class member function call : { this } getDictionaryInitializationAsNew } }
                return : { array initialize : mixed { class member function call : { this } getDictionaryClass } 0 }
            if end

            variable declare : output string { class member function call : { this } getDictionaryClass }
            variable declare : numKeys number { operation : { native call : array length functionArgs } minus 1 }
            variable declare : i number

            operation : output increaseby "<" plus { class member function call : { this } parseType { array get item : functionArgs 0 } }
            operation : output increaseby { class member function call : { this } getClassTemplatesBetween }

            for numbers start : i 1 lessthan numKeys
                operation : output increaseby { class member function call : { this } getDictionaryClass } plus "<"
                operation : output increaseby { class member function call : { this } parseType { array get item : functionArgs i } }
                operation : output increaseby { class member function call : { this } getClassTemplatesBetween }
            for end

            operation : output increaseby { class member function call : { this } parseType { array get item : functionArgs i } }

            for numbers start : i 0 lessthan numKeys
                operation : output increaseby ">"
            for end

            return : { array initialize : mixed output 0 }
        class member function end

        comment line : string value
        class member function start : Language public ElifStart mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "ElifStart" functionArgs 1

            variable declare : output string { operation : { class member function call : { this } getElif } plus { class member function call : { this } getConditionStartLeft }

            operation : output increaseby { array get item : functionArgs 0 } plus { class member function call : { this } getConditionStartRight }

            return : { array initialize : mixed "\0" -1 output 1 }
        class member function end

        class member function start : Language public ElseStart mixed[] functionArgs string[] isInline boolean
            return : { array initialize : mixed "\0" -1 { operation : { class member function call : { this } getElse } plus { class member function call : { this } getConditionContinueRight } } 1 }
        class member function end

        class member function start : Language public FileEnd mixed[] functionArgs string[] isInline boolean
            variable declare : output string { class member function call : { this } getFileEndLine }
            
            if start : { operation : { native call : string length output } equalto 0 }
                return : { array initialize : mixed output { class static variable get : Language INT_MIN } }
            if end
            
            return : { array initialize : mixed output -1 }
        class member function end

        comment line : name
        class member function start : Language public FileStart mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "FileStart" functionArgs 1

            variable declare : left string { class member function call : { this } getFileStartLeft }
            variable declare : right string { class member function call : { this } getFileStartRight }

            if start : { operation : { operation : { native call : string length left } equalto 0 } and { operation : { native call : string length right } equalto 0 } }
                return : { array initialize : mixed "" { class static variable get : Language INT_MIN } }
            if end

            return : { array initialize : mixed { operation : left plus { array get item : functionArgs 0 } plus right } 1 }
        class member function end

        class member function start : Language public Finally mixed[] functionArgs string[] isInline boolean
            variable declare : output string { class member function call : { this } getExceptionFinally }

            operation : output increaseby { class member function call : { this } getConditionContinueRight }

            return : { array initialize : mixed "\0" -1 output 1 }
        class member function end

        comment line : string keyName, string keyType, string container
        comment line : E.x. for each keys start : i string names
        class member function start : Language public ForEachKeysStart mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "ForEachKeysStart" functionArgs 3

            variable declare : variableDeclareArgs mixed[] { array initialize : mixed { array get item : functionArgs 0 } { array get item : functionArgs 1 } }
            variable declare : output string

            if start : { class member function call : { this } getForEachAsMethod }
                operation : output equals { array get item : functionArgs 2 }
                operation : output increaseby { class member function call : { this } getForEachStarter }
                operation : output increaseby { array get item : { class member function call : { this } VariableDeclarePartial variableDeclareArgs true } 0 }
                operation : output increaseby { class member function call : { this } getForEachInner }
            else start
                operation : output equals { class member function call : { this } getForEachStarter }
                operation : output increaseby { array get item : { class member function call : { this } VariableDeclarePartial variableDeclareArgs true } 0 }
                operation : output increaseby { class member function call : { this } getForEachInner }

                if start : { class member function call : { this } getForEachKeysAsStatic }
                    operation : output increaseby { class member function call : { this } getForEachKeysGet } plus "(" plus { array get item : functionArgs 2} plus ")"
                else start
                    operation : output increaseby { array get item : functionArgs 2 } plus { class member function call : { this } getForEachKeysGet }
                if end

                operation : output increaseby { class member function call : { this } getConditionStartRight }
            if end

            return : { array initialize : mixed output 1 }
        class member function end

        comment line : Assume keyName and valueName exist, while pairName is created (some languages won't use pairName)
        comment line : Ex. for each pairs start : pair name string count int names
        comment line : string pairName, string keyName, string keyType, string valueName, string valueType, string container
        class member function start : Language public ForEachPairsStart mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "ForEachPairsStart" functionArgs 6

            variable declare : pairName string { array get item : functionArgs 0 }
            variable declare : keyName string { array get item : functionArgs 1 }
            variable declare : keyType string { array get item : functionArgs 2 }
            variable declare : valueName string { array get item : functionArgs 3 }
            variable declare : valueType string { array get item : functionArgs 4 }
            variable declare : container string { array get item : functionArgs 5 }
            variable declare : variableDeclareArgs string[]
            variable declare : line string
            variable declare : output mixed[]

            if start : { class member function call : { this } getForEachAsMethod }
                comment line : container.each do |keyName, valueName|
                operation : output equals { array initialize sized : string 4 }
                operation : variableDeclareArgs equals { array initialize sized : string 2 }

                comment line : container.each do |
                operation : line equals container
                operation : line increaseby { class member function call : { this } getForEachStarter }

                comment line : (                    keyName)
                operation : { array get item : variableDeclareArgs 0 } equals keyName
                operation : { array get item : variableDeclareArgs 1 } equals keyType
                operation : line increaseby { array get item : { class member function call : { this } VariableDeclarePartial variableDeclareArgs true } 0 }

                comment line : (                           , valueName|)
                operation : { array get item : variableDeclareArgs 0 } equals valueName
                operation : { array get item : variableDeclareArgs 1 } equals valueType
                operation : line increaseby (", ") plus { array get item : { class member function call : { this } VariableDeclarePartial variableDeclareArgs true } 0 }
                operation : line increaseby { class member function call : { this } getForEachInner }

                operation : output equals { array initialize : mixed line 1 }
            elif start : { class member function call : { this } getForEachPairsAsPair }
                comment line : foreach (KeyValuePair<string, int> pairName in container) {
                comment line : (    keyName = pairName.Key;)
                comment line : (    valueName = pairName.Value;)
                operation : output equals { array initialize sized : string 6 }

                comment line : forEach (KeyValuePair<string, int> pairName)
                operation : line equals { class member function call : { this } getForEachStarter }
                operation : variableDeclareArgs equals { array initialize sized : string 2 }
                operation : { array get item : variableDeclareArgs 0 } equals pairName
                operation : { array get item : variableDeclareArgs 1 } equals { class member function call : { this } getForEachPairsPairClass } plus "<" plus keyType plus (", ") plus valueType plus ">"
                operation : line increaseby { array get item : { class member function call : { this } VariableDeclarePartial variableDeclareArgs true } 0 }

                comment line : ((                                            in container) {)
                operation : line increaseby { class member function call : { this } getForEachInner }
                operation : line increaseby container
                operation : line increaseby { class member function call : { this } getConditionStartRight }

                operation : { array get item : output 0 } equals line
                operation : { array get item : output 1 } equals 1

                comment line :     keyName = pairName.Key
                operation : variableDeclareArgs equals { array initialize sized : string 3 }
                operation : { array get item : variableDeclareArgs 0 } equals keyName
                operation : { array get item : variableDeclareArgs 1 } equals "equals"
                operation : { array get item : variableDeclareArgs 2 } equals pairName plus { class member function call : { this } getForEachPairsRetrieveKey }
                operation : line equals { array get item : { class member function call : { this } Operation variableDeclareArgs false } 0 }
                operation : { array get item : output 2 } equals line
                operation : { array get item : output 3 } equals 0

                comment line :     valueName = pairName.Value
                operation : variableDeclareArgs equals { array initialize sized : string 3 }
                operation : { array get item : variableDeclareArgs 0 } equals valueName
                operation : { array get item : variableDeclareArgs 1 } equals "equals"
                operation : { array get item : variableDeclareArgs 2 } equals pairName plus { class member function call : { this } getForEachPairsRetrieveValue }
                operation : line equals { array get item : { class member function call : { this } Operation variableDeclareArgs false } 0 }
                operation : { array get item : output 4 } equals line
                operation : { array get item : output 5 } equals 0
            else start
                comment line : for (keyName in container) {
                comment line :     valueName = container[keyName]
                operation : output equals { array initialize sized : mixed 4 }

                comment line : for (keyName in container) {
                operation : line equals { class member function call : { this } getForEachStarter }
                operation : line increaseby keyName
                operation : line increaseby { class member function call : { this } getForEachInner }
                operation : line increaseby container
                operation : line increaseby { class member function call : { this } getConditionStartRight }
                operation : { array get item : output 0 } equals line
                operation : { array get item : output 1 } equals 1

                comment line :     valueName = container[keyName]
                operation : variableDeclareArgs equals { array initialize sized : mixed 3 }
                operation : { array get item : variableDeclareArgs 0 } equals valueName
                operation : { array get item : variableDeclareArgs 1 } equals "equals"
                operation : { array get item : variableDeclareArgs 2 } equals container plus "[" plus keyName plus "]"
                operation : line equals { array get item : { class member function call : { this } Operation variableDeclareArgs false } 0 }
                operation : { array get item : output 2 } equals line
                operation : { array get item : output 3 } equals 0
            if end
            
            return : output
        class member function end

        class member function start : Language public ForEnd mixed[] functionArgs string[] isInline boolean
            return : { array initialize : mixed { class member function call : { this } getConditionEnd } -1 }
        class member function end

        comment line : string i, string initial, string comparison, string boundary[, string change]
        comment line : e.x. i int 0 lessthan 7
        class member function start : Language public ForNumbersStart mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "ForNumbersStart" functionArgs 4

            variable declare : output string { operation : "for" plus { class member function call : { this } getConditionStartLeft } }
            variable declare : i string { array get item : functionArgs 0 }
            variable declare : initial string { array get item : functionArgs 1 }
            variable declare : comparison string { array get item : functionArgs 2 }
            variable declare : boundary string { array get item : functionArgs 3 }
            variable declare : direction string "increaseby"
            variable declare : change string
            variable declare : generalArgs mixed[]

            if start : { operation : { native call : array length functionArgs } greaterthan 4 }
                operation : change equals { array get item : functionArgs 4 }
            else start
                operation : change equals "1"
            if end

            if start : { class member function call : { this } getRangedForLoops }
                operation : output increaseby i
                operation : output increaseby { class member function call : { this } getRangedForLoopsStart }
                operation : output increaseby initial plus { class member function call : { this } getRangedForLoopsMiddle } plus change
                
                if start : { operation : change notequalto "1" }
                    operation : output increaseby { class member function call : { this } getRangedForLoopsMiddle } plus change
                if end

                operation : output increaseby { class member function call : { this } getRangedForLoopsEnd }
            else start
                operation : generalArgs equals { array initialize : string i "equals" initial }
                operation : output increaseby { array get item : { class member function call : { this } Operation generalArgs true } 0 } plus { class member function call : { this } getSemiColon } plus (" ")

                operation : generalArgs equals { array initialize : string i comparison boundary }
                operation : output increaseby { array get item : { class member function call : { this } Comparison generalArgs true } 0 } plus { class member function call : { this } getSemiColon } plus (" ")

                operation : generalArgs equals { array initialize : string i direction change }
                operation : output increaseby { array get item : { class member function call : { this } Operation generalArgs true } 0 }
            if end

            operation : output increaseby { class member function call : { this } getConditionStartRight }

            return : { array initialize : mixed output 1 }
        class member function end

        comment line : string name[, string parameter, ...]
        class member function start : Language public FunctionCall mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "FunctionCall" functionArgs 1

            variable declare : output string { operation : { array get item : functionArgs 0 } plus "(" }
            variable declare : i number

            if start : { operation : { native call : array length functionArgs } greaterthan 1 }
                for numbers start : i 1 lessthan { operation : { native call : array length functionArgs } minus 1 }
                    operation : output increaseby { array get item : functionArgs i } plus (", ")
                for end

                operation : output increaseby { array get item : functionArgs i }
            if end

            operation : output increaseby ")"

            if start : { not : isInline }
                operation : output increaseby { class member function call : { this } getSemiColon }
            if end

            return : { array initialize : mixed output 0 }
        class member function end

        class member function start : Language public FunctionCallPartialEnd mixed[] functionArgs string[] isInline boolean
            variable declare : output string ")"

            if start : { not : isInline }
                operation : output increaseby { class member function call : { this } getSemiColon }
            if end

            return : { array initialize : mixed output -1 }
        class member function end

        comment line : string name
        class member function start : Language public FunctionCallPartialStart mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "FunctionCallPartialStart" functionArgs 1

            return : { array initialize : mixed { operation : { array get item : functionArgs 0 } plus "(" } 1 }
        class member function end

        class member function start : Language public FunctionEnd mixed[] functionArgs string[] isInline boolean
            return : { array initialize : mixed { class member function call : { this } getFunctionDefineEnd } -1 }
        class member function end

        comment line : string name, string return[, string argumentName, string argumentType, ...]
        class member function start : Language public FunctionStart mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "FunctionStart" functionArgs 2

            variable declare : output string ""
            variable declare : variableDeclarationArgs string[] { array initialize : string }
            variable declare : i number

            if start : { operation : { class member function call : { this } getFunctionReturnsExplicit } and { not : { class member function call : { this } getFunctionTypeAfterName } } }
                operation : output increaseby { class member function call : { this } parseType { array get item : functionArgs 1 } } plus (" ")
            if end

            operation : output increaseby { class member function call : { this } getFunctionDefine } plus { array get item : functionArgs 0 } plus "("

            comment line : All arguments are added using VariableDeclarePartial
            if start : { operation : { native call : array length functionArgs } greaterthan 2 }
                for numbers start : i 2 lessthan { native call : array length functionArgs } 2
                    operation : { array get item : variableDeclarationArgs 0 } equals { array get item : functionArgs i }
                    operation : { array get item : variableDeclarationArgs 1 } equals { array get item : functionArgs { operation : i + 1 } }

                    operation : output increaseby { array get item : { class member function call : { this } VariableDeclarePartial variableDeclarationArgs true } 0 } plus (", ")
                for end

                comment line : The last argument does not have the last ", " at the end
                operation : output equals { native call : string substring output 0 { operation : { native call : string length output } minus 2 } }
            if end

            operation : output increaseby ")"

            if start : { operation : { class member function call : { this } getFunctionReturnsExplicit } and { class member function call : { this } getFunctionTypeAfterName } }
                operation : output increaseby { class member function call : { this } getFunctionTypeMarker } plus { class member function call : { this } parseType { array get item : functionArgs 1 } }
            if end

            operation : output increaseby { class member function call : { this } getFunctionDefineRight }
            return : { array initialize : mixed output 1 }
        class member function end

        class member function start : Language public IfEnd mixed[] functionArgs string[] isInline boolean
            return : { array initialize : mixed { class member function call : { this } getConditionEnd } -1 }
        class member function end

        comment line : string value
        class member function start : Language public IfStart mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "IfStart" functionArgs 1

            variable declare : output string { operation : { class member function call : { this } getIf } plus { class member function call : { this } getConditionStartLeft } }

            operation : output increaseby { array get item : functionArgs 0 } plus { class member function call : { this } getConditionStartRight }

            return : { array initialize : mixed output 1 }
        class member function end

        comment line : string file
        class member function start : Language public Include mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "Include" functionArgs 1
            
            variable declare : output string { class member function call : { this } getIncludeStarter }
            operation : output increaseby { array get item : functionArgs 0 }

            if start : { class member function call : { this } getIncludeFileExtension } }
                operation : output increaseby "." plus { class member function call : { this } getExtension }
            if end
            
            operation : output increaseby { class member function call : { this } getIncludeEnder }

            return : { array initialize : mixed output 0 }
        class member function end

        class member function start : Language public IncludeDictionary mixed[] functionArgs string[] isInline boolean
            variable declare : dictionaryType string { class member function call : { this } getIncludeDictionaryType }

            if start : { operation : { native call : string length dictionaryType } equalto 0 }
                return : { array initialize : mixed ("") { class static variable get : Language INT_MIN } }
            if end

            return : { class member function call : { this } Include { array initialize : string dictionaryType } isInline }
        class member function end

        comment line : [, string param, ...], statement
        class member function start : Language public LambdaDeclareInline mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "LambdaDeclareInline" functionArgs 3

            variable declare : output string { class member function call : { this } getLambdaDeclareStarter }
            variable declare : i number

            for numbers start : i 0 lessthan { operation : { native call : array length functionArgs } minus 1 }
                operation : output increaseby { array get item : functionArgs i } plus (", ")
            for end

            operation : output equals { native call : string substring output 0 { operation : { native call : string length output } minus 2 } }
            operation : output increaseby { class member function call : { this } getLambdaDeclareMiddle }

            operation : output increaseby { array get item : functionArgs { operation : { native call : array length functionArgs } minus 1 } } plus { class member function call : { this } getLambdaDeclareEnder }

            return : { array initialize : mixed output 0 }
        class member function end

        comment line : string visibility, string name, string return type[, string paramName, string paramType, ...]
        class member function start : Language public LambdaTypeDeclare mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "LambdaTypeDeclare" functionArgs 3

            if start : { not : { class member function call : { this } getLambdaTypeDeclarationRequired } }
                return : { array initialize : mixed "" { class static variable get : Language INT_MIN } }
            if end
            
            variable declare : start string[] { class member function call : { this } getLambdaTypeDeclarationStart }
            variable declare : middle string[] { class member function call : { this } getLambdaTypeDeclarationMiddle }
            variable declare : end string[] { class member function call : { this } getLambdaTypeDeclarationEnd }
            variable declare : variableDeclarationArgs string[] { array initialize sized : string 2 }
            variable declare : line string ""
            variable declare : i number

            if start : { class member function call : { this } getLambdaTypeDeclarationAsInterface }
                variable declare : output mixed[] { array initialize sized: mixed 6 }

                comment line : public interface TestInterface {
                operation : line equals { class member function call : { this } getClassPublicAlias }
                operation : line increaseby { array get item : start 0 }
                operation : line increaseby { array get item : functionArgs 0 }
                operation : line increaseby { array get item : start 1 }

                operation : { array get item : output 0 } equals line
                operation : { array get item : output 1 } equals 1

                comment line :     (a: string, b: int): boolean;
                operation : line equals { array get item : middle 0 } plus "("

                if start : { operation : { native call : array length functionArgs } greaterthan 2 }
                    comment line : All arguments are added using VariableDeclarePartial
                    for numbers start : i 2 lessthan { native call : array length functionArgs } 2
                        operation : { array get item : variableDeclarationArgs 0 } equals { array get item : functionArgs i }
                        operation : { array get item : variableDeclarationArgs 1 } equals { array get item : functionArgs { operation : i plus 1 } }

                        operation : line increaseby { array get item : { class member function call : { this } VariableDeclarePartial variableDeclarationArgs true } 0 } plus (", ")
                    for end

                    comment line : The last argument does not have the last ", " at the end
                    operation : line equals { native call : string substring line 0 { operation : { native call : string length line } minus 2 } }
                if end

                operation : line increaseby ")"

                if start : { operation : { class member function call : { this } getFunctionReturnsExplicit } and { class member function call : { this } getFunctionTypeAfterName } }
                    operation : line increaseby { class member function call : { this } getFunctionTypeMarker } plus { class member function call : { this } parseType { array get item : functionArgs 1 } }
                if end

                operation : line increaseby { array get item : middle 1 }
                operation : { array get item : output 2 } equals line
                operation : { array get item : output 3 } equals 0
                
                comment line : }
                operation : { array get item : output 4 } equals { array get item : end 0 }
                operation : { array get item : output 5 } equals -1

                return : output
            else start
                operation : line increaseby { array get item : start 0 } plus { class member function call : { this } getClassPublicAlias } plus { array get item : start 1 }
                operation : line increaseby (" ") plus { class member function call : { this } parseType { array get item : functionArgs 1 } }
                operation : line increaseby (" ") plus { array get item : functionArgs 0 }

                if start : { operation : { native call : array length functionArgs } greaterthan 2 }
                    operation : line increaseby { array get item : middle 0 }

                    comment line : All arguments are added using VariableDeclarePartial
                    for numbers start : i 2 lessthan { native call : array length functionArgs } 2
                        operation : { array get item : variableDeclarationArgs 0 } equals { array get item : functionArgs i }
                        operation : { array get item : variableDeclarationArgs 1 } equals { array get item : functionArgs { operation : i plus 1 } }

                        operation : line increaseby { array get item : { class member function call : { this } VariableDeclarePartial variableDeclarationArgs true } 0 } plus (", ")
                    for end

                    comment line : The last argument does not have the last (", ") at the end
                    operation : line equals { native call : string substring line 0 { operation : { native call : string length line } - 2 } }
                    operation : line increaseby { array get item : middle 1 }
                if end

                operation : line equals { array get item : end 0 } plus line plus { array get item : end 1 }
                return : { array initialize : mixed line 0 }
            if end
        class member function end

        class member function start : Language public LoopBreak mixed[] functionArgs string[] isInline boolean
            return : { array initialize : mixed { operation : { class member function call : { this } getBreak } plus { class member function call : { this } getSemiColon } } 0 }
        class member function end

        class member function start : Language public LoopContinue mixed[] functionArgs string[] isInline boolean
            return : { array initialize : mixed { operation : { class member function call : { this } getContinue } plus { class member function call : { this } getSemiColon } } 0 }
        class member function end

        class member function start : Language public MainEnd mixed[] functionArgs string[] isInline boolean
            variable declare : start string { class member function call : { this } getMainStartLine }

            if start : { operation : { native call : string length start } equalto 0 }
                return : { array initialize : mixed { class member function call : { this } getMainEndLine } 0 }
            if end
            
            return : { array initialize : mixed { class member function call : { this } getMainEndLine } -1 }
        class member function end

        class member function start : Language public MainStart mixed[] functionArgs string[] isInline boolean
            variable declare : output string { class member function call : { this } getMainStartLine }

            if start : { operation : { native call : string length output } equalto 0 }
                return : { array initialize : mixed output 0 }
            if end
                return : { array initialize : mixed output 1 }
        class member function end

        comment line : string class, string function, string instance[, string parameter, ...]
        class member function start : Language public NativeCall mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "NativeFunction" functionArgs 3

            variable declare : className string { class member function call : { this } getTypeAlias { array get item : functionArgs 0 } }
            variable declare : aliasInfo { dictionary type : string string } { class member function call : { this } getNativeFunctionAlias { array get item : functionArgs 0 } { array get item : functionArgs 1 } }
            variable declare : placement string { dictionary key get : aliasInfo "placement" }
            variable declare : usage string { dictionary key get : aliasInfo "usage" }
            variable declare : caller string
            variable declare : numArgs number
            variable declare : start number
            variable declare : output string
            variable declare : i number

            if start : { operation : placement equalto "member" }
                operation : caller equals { array get item : functionArgs 2 } plus "." plus { dictionary key get : aliasInfo "alias" }
                operation : numArgs equals { operation : { native call : array length functionArgs } minus 3 }
                operation : start equals 2
            elif start : { operation : placement equalto "array" }
                operation : caller equals { array get item : functionArgs 2 }
                operation : numArgs equals { operation : { native call : array length functionArgs } minus 3 }
                operation : start equals 2
            elif start : { operation : placement equalto "static" }
                operation : caller equals { dictionary key get : aliasInfo "alias" }
                operation : numArgs equals { operation : { native call : array length functionArgs } minus 2 }
                operation : start equals 1
            if end

            if start : { operation : usage equalto "function" }
                variable declare : functionCallArgs mixed[] { array initialize sized : mixed numArgs }
                variable declare : i number

                operation : { array get item : functionCallArgs 0 } equals caller

                for numbers start : i 1 lessthan { operation : { native call : array length functionArgs } minus start }
                    operation : { array get item : functionCallArgs i } equals { array get item : functionArgs { operation : i plus start } }
                for end

                operation : output equals { array get item : { class member function call : { this } FunctionCall functionCallArgs isInline } 0 }
            elif start : { operation : usage equalto "variable" }
                operation : output equals caller
            elif start : { operation : usage equalto "array" }
                operation : output equals caller plus "["

                comment line : Default to just the separator if there are no arguments
                if start : { operation : { native call : array length functionArgs } minus 1 equalto start }
                    operation : output increaseby { dictionary key get : aliasInfo "separator" }
                else start
                    for numbers start : i 1 lessthan { operation : { native call : array length functionArgs } minus start }
                        operation : output increaseby { array get item : functionArgs { operation : i plus start } } plus { dictionary key get : aliasInfo "separator" }
                    for end

                    comment line : Remove the last separator if more than one argument is added
                    if start : { operation : { native call : array length functionArgs } minus start greaterthan 2 }
                        operation : output equals { native call : string substring output 0 { operation : { native call : string length output } minus { native call : string length { dictionary key get : aliasInfo "separator" } } } }
                    if end
                if end

                operation : output increaseby "]"
            if end

            return : { array initialize : mixed output 0 }
        class member function end

        comment line : string value
        class member function start : Language public Not mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "Operation" functionArgs 1

            return : { array initialize : mixed { operation : "!" plus { array get item : functionArgs 0 } } 0 }
        class member function end

        comment line : string left, string operator, string right[, string operator, string right, ...]
        class member function start : Language public Operation mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "Operation" functionArgs 3

            variable declare : output string { operation : { array get item : functionArgs 0 } plus (" ") }
            variable declare : i number

            for numbers start : i 1 lessthan { native call : array length functionArgs } 2
                operation : output increaseby { operation : { class member function call : { this } getOperationAlias { array get item : functionArgs i } } plus (" ") }
                operation : output increaseby { operation : { class member function call : { this } getValueAlias { array get item : functionArgs { operation : i plus 1 } } } plus (" ") }
            for end

            operation : output equals { native call : string substring output 0 { operation : { native call : string length output } minus 1 } }

            if start : { not : isInline }
                operation : output increaseby { class member function call : { this } getSemiColon }
            if end

            return : { array initialize : mixed output 0 }
        class member function end

        comment line : string inside[, ...]
        class member function start : Language public Parenthesis mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "Parenthesis" functionArgs 1

            variable declare : output string "("
            variable declare : i number

            for numbers start : i 0 lessthan { operation : { native call : array length functionArgs } minus 1 }
                operation : output increaseby { array get item : functionArgs i } plus (", ")
            for end

            operation : output increaseby { array get item : functionArgs i }
            operation : output increaseby ")"

            return : { array initialize : mixed output 0 }
        class member function end

        comment line : [string message, ...]
        class member function start : Language public PrintLine mixed[] functionArgs string[] isInline boolean
            variable declare : output string { operation : { class member function call : { this } getPrintFunction } plus "(" }
            variable declare : i number

            for numbers start : i 0 lessthan { operation : { native call : array length functionArgs } minus 1 }
                operation : output increaseby { array get item : functionArgs i } plus (", ")
            for end
            
            operation : output increaseby { array get item : functionArgs i }
            operation : output increaseby ")"

            if start : { not : isInline }
                operation : output increaseby { class member function call : { this } getSemiColon }
            if end

            return : { array initialize : mixed output 0 }
        class member function end

        comment line : string value
        class member function start : Language public Return mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "FunctionReturn" functionArgs 1

            return : { array initialize : mixed { operation : ("return ") plus { array get item : functionArgs 0 } plus { class member function call : { this } getSemiColon } } 0 }
        class member function end

        class member function start : Language public This mixed[] functionArgs string[] isInline boolean
            return : { array initialize : mixed { class member function call : { this } getClassThis } 0 }
        class member function end

        comment line : [string message]
        class member function start : Language public Throw mixed[] functionArgs string[] isInline boolean
            variable declare : output string { operation : { class member function call : { this } getExceptionThrow } plus (" ") }

            if start : { operation : { native call : array length functionArgs } greaterthan 0 }
                operation : output increaseby { array get item : { class member function call : { this } ClassNew { array initialize : string { class member function call : { this } getExceptionClass } { array get item : functionArgs 0 } } true } 0 }
            else start
                operation : output increaseby { array get item : { class member function call : { this } ClassNew { array initialize : string { class member function call : { this } getExceptionClass } } true } 0 }
            if end

            if start : { not : isInline }
                operation : output increaseby { class member function call : { this } getSemiColon }
            if end

            return : { array initialize : mixed output 0 }
        class member function end

        class member function start : Language public TryStart mixed[] functionArgs string[] isInline boolean
            return : { array initialize : mixed { operation : { class member function call : { this } getExceptionTry } plus { class member function call : { this } getConditionContinueRight } } 1 }
        class member function end

        class member function start : Language public TryEnd mixed[] functionArgs string[] isInline boolean
            return : { array initialize : mixed { class member function call : { this } getConditionEnd } -1 }
        class member function end

        comment line : string type
        class member function start : Language public Type mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "Type" functionArgs 1
            return : { array initialize : mixed { class member function call : { this } getTypeAlias { array get item : functionArgs 0 } } 0 }
        class member function end

        comment line : string value
        class member function start : Language public Value mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "VariableDeclare" functionArgs 1

            return : { array initialize : mixed { class member function call : { this } getValueAlias { array get item : functionArgs 0 } } 0 }
        class member function end

        comment line : string name, string type[, string value]
        comment line : Ex. var x: number;
        comment line : Ex. var x: number = 7;
        class member function start : Language public VariableDeclare mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "VariableDeclare" functionArgs 2

            variable declare : output mixed[] { class member function call : { this } VariableDeclareIncomplete functionArgs isInline }

            if start : { not : isInline }
                operation : { array get item : output 0 } equals { array get item : output 0 } plus { class member function call : { this } getSemiColon }
            if end

            operation : { array get item : output 1 } equals 0

            return : output
        class member function end

        comment line : string name, string type[, string value]
        comment line : Ex. var x: number
        comment line : Ex. var x: number = 7
        class member function start : Language public VariableDeclareIncomplete mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "VariableDeclareIncomplete" functionArgs 2

            variable declare : variableType string { class member function call : { this } parseType { array get item : functionArgs 1 } }
            variable declare : variableDeclarationArgs string[]
            variable declare : variableDeclared mixed[]

            if start : { operation : { native call : array length functionArgs } equalto 2 }
                operation : variableDeclarationArgs equals { array initialize : string { array get item : functionArgs 0 } variableType }
            else start
                operation : variableDeclarationArgs equals { array initialize : string { array get item : functionArgs 0 } variableType { array get item : functionArgs 2 } }
            if end

            operation : variableDeclared equals { class member function call : { this } VariableDeclarePartial functionArgs isInline }
            operation : { array get item : variableDeclared 0 } equals { class member function call : { this } getVariableDeclareStart } plus { array get item : variableDeclared 0 }
            operation : { array get item : variableDeclared 1 } equals 1

            return : variableDeclared
        class member function end
        
        comment line : string name, string type[, string value]
        comment line : Ex. x: number
        comment line : Ex. x: number = 7
        class member function start : Language public VariableDeclarePartial mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "VariableDeclarePartial" functionArgs 2

            variable declare : variableType string { class member function call : { this } parseType { array get item : functionArgs 1 } }
            variable declare : output string ""

            if start : { class member function call : { this } getVariableTypesExplicit }
                if start : { class member function call : { this } getVariableTypesAfterName }
                    operation : output increaseby { array get item : functionArgs 0 } plus { class member function call : { this } getVariableTypeMarker } plus { class member function call : { this } parseType { array get item : functionArgs 1 } }
                else start
                    operation : output increaseby { class member function call : { this } parseType variableType } plus (" ") plus { array get item : functionArgs 0 }
                if end
            else start
                operation : output increaseby { array get item : functionArgs 0 }
            if end

            if start : { operation : { native call : array length functionArgs } greaterthan 2 }
                operation : output increaseby (" ") plus { class member function call : { this } getOperationAlias "equals" } plus (" ") plus { class member function call : { this } getValueAlias { array get item : functionArgs 2 } }
            if end

            return : { array initialize : mixed output 1 }
        class member function end

        class member function start : Language public WhileEnd mixed[] functionArgs string[] isInline boolean
            return : { array initialize : mixed { class member function call : { this } getConditionEnd } -1 }
        class member function end

        comment line : string value
        class member function start : Language public WhileStart mixed[] functionArgs string[] isInline boolean
            class member function call : { this } requireArgumentsLength "WhileVariableStart" functionArgs 1

            variable declare : output string { operation : "while" plus { class member function call : { this } getConditionStartLeft } }

            operation : output increaseby { class member function call : { this } getOperationAlias { array get item : functionArgs 0 } } plus { class member function call : { this } getConditionStartRight }

            return : { array initialize : mixed output 1 }
        class member function end

        
        comment block : Utilities

        class member function start : Language private requireArgumentsLength void functionName string functionArgs string[] amount number
            if start : { operation  : { native call : array length functionArgs } lessthan amount }
                throw : { operation : ("Not enough arguments given to ") plus functionName plus (". Required: ") plus amount plus "."  }
            if end
        class member function end

    class end
file end
